<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ImageResizer</name>
    </assembly>
    <members>
        <member name="T:ImageResizer.Plugins.IVirtualFile">
            <summary>
            A virtual file. Implementing this allows usage of your VirtualProvider without registering it with ASP.NET
            </summary>
        </member>
        <member name="M:ImageResizer.Plugins.IVirtualFile.Open">
            <summary>
            Returns an opened stream to the file contents.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ImageResizer.Plugins.IVirtualFile.VirtualPath">
            <summary>
            The virtual path of the file (relative to the domain, like /app/folder/file.ext)
            </summary>
        </member>
        <member name="T:ImageResizer.Plugins.Basic.Trial">
            <summary>
            Can be used by plugins to implement 'trial version' functionality. Not currently used.
            </summary>
        </member>
        <member name="T:ImageResizer.Resizing.BuilderExtension">
            <summary>
            Provides a useable base class that can be used to modify the behavior of ImageBuilder.
            When registered with an ImageBuilder instance, the ImageBuilder will call the corresponding methods on the extension prior to executing its own methods. 
            </summary>
        </member>
        <member name="T:ImageResizer.Resizing.AbstractImageProcessor">
            <summary>
            Not for external use. Inherit from BuilderExtension instead.
            Dual-purpose base class for both ImageBuilder and BuilderExtension
             Extensions can inherit and override certain methods.
            ImageBuilder inherits this method to utilize its extension invocation code. 
            Each method of AbstractImageProcessor loops through all extensions and executes the same method on each. Provides a sort of multiple-inheritance mechanisim.
            </summary>
        </member>
        <member name="M:ImageResizer.Resizing.AbstractImageProcessor.#ctor">
            <summary>
            Creates a new AbstractImageProcessor with no extensions
            </summary>
        </member>
        <member name="M:ImageResizer.Resizing.AbstractImageProcessor.#ctor(System.Collections.Generic.IEnumerable{ImageResizer.Resizing.BuilderExtension})">
            <summary>
            Creates a new AbstractImageProcessor which will run the specified extensions with each method call.
            </summary>
            <param name="extensions"></param>
        </member>
        <member name="F:ImageResizer.Resizing.AbstractImageProcessor.exts">
            <summary>
            Contains the set of extensions that are called for every method. 
            </summary>
        </member>
        <member name="M:ImageResizer.Resizing.AbstractImageProcessor.PreLoadImage(System.Object@,ImageResizer.ResizeSettings)">
            <summary>
            Extend this to allow additional types of source objects to be accepted by transforming them into accepted types, such as Image, Bitmap,
            Stream, or a physical path
            </summary>
            <param name="source"></param>
            <param name="settings"></param>
        </member>
        <member name="M:ImageResizer.Resizing.AbstractImageProcessor.DecodeStreamFailed(System.IO.Stream,ImageResizer.ResizeSettings,System.String)">
            <summary>
            Extensions are executed until one extension returns a non-null value. 
            This is taken to mean that the error has been resolved.
            Extensions should not throw an exception unless they wish to cause subsequent extensions to not execute.
            If extensions throw an ArgumentException or ExternalException, it will be wrapped in an ImageCorruptedException instance.
            If the Bitmap class is used for decoding, read gdi-bugs.txt and make sure you set b.Tag to new BitmapTag(optionalPath,stream);
            </summary>
        </member>
        <member name="M:ImageResizer.Resizing.AbstractImageProcessor.DecodeStream(System.IO.Stream,ImageResizer.ResizeSettings,System.String)">
            <summary>
            Extend this to support alternate image source formats. 
            If the Bitmap class is used for decoding, read gdi-bugs.txt and make sure you set b.Tag to new BitmapTag(optionalPath,stream);
            </summary>
            <param name="s"></param>
            <param name="settings"></param>
            <param name="optionalPath"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Resizing.AbstractImageProcessor.PreAcquireStream(System.Object@,ImageResizer.ResizeSettings)">
            <summary>
            Extend this to allow additional types of *destination* objects to be accepted by transforming them into either a bitmapholder or a stream.
            </summary>
            <param name="dest"></param>
            <param name="settings"></param>
        </member>
        <member name="M:ImageResizer.Resizing.AbstractImageProcessor.buildToStream(System.Drawing.Bitmap,System.IO.Stream,ImageResizer.ResizeSettings)">
            <summary>
            Called for Build() calls that want the result encoded. (Not for Bitmap Build(source,settings) calls.
            Only override this method if you need to replace the behavior of image encoding and image processing together, such as adding support
            for resizing multi-page TIFF files or animated GIFs.
            
            Does NOT dispose of 'source' or 'source's underlying stream.
            </summary>
            <param name="source"></param>
            <param name="dest"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Resizing.AbstractImageProcessor.buildToBitmap(System.Drawing.Bitmap,ImageResizer.ResizeSettings,System.Boolean)">
            <summary>
            Most calls funnel through here. Default behavior configures an ImageState instance and calls Process(imageState); 
            Shouldn't be overriden for any reason I can think of - use the appropriate virtual method under Process().
            If an extension returns a Bitmap instance, it will be used instead of the default behavior.
            Does NOT dispose of 'source' or 'source's underlying stream.
            </summary>
            <param name="source"></param>
            <param name="settings"></param>
            <param name="transparencySupported"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Resizing.AbstractImageProcessor.OnProcess(ImageResizer.Resizing.ImageState)">
            <summary>
            Process.0 First step of the Process() method. Can replace the entire Process method if RequestAction.Cancel is returned.
            Can be used to add points to translate (for image maps), and also to modify the settings 
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:ImageResizer.Resizing.AbstractImageProcessor.PrepareSourceBitmap(ImageResizer.Resizing.ImageState)">
            <summary>
            Process.1 Switches the bitmap to the correct frame or page, and applies source flipping commands.
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:ImageResizer.Resizing.AbstractImageProcessor.PostPrepareSourceBitmap(ImageResizer.Resizing.ImageState)">
            <summary>
            Process.2 Extend this to apply any pre-processing to the source bitmap that needs to occur before Layout begins
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:ImageResizer.Resizing.AbstractImageProcessor.Layout(ImageResizer.Resizing.ImageState)">
            <summary>
            Process.3(Layout).0: This is the last point at which points to translate should be added.
            Only return RequestedAction.Cancel if you wish to replace the entire Layout sequence logic.
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:ImageResizer.Resizing.AbstractImageProcessor.FlipExistingPoints(ImageResizer.Resizing.ImageState)">
            <summary>
            Process.3(Layout).1: This is where the points in the layout are flipped the same way the source bitmap was flipped (unless their flags specify otherwise)
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:ImageResizer.Resizing.AbstractImageProcessor.LayoutImage(ImageResizer.Resizing.ImageState)">
            <summary>
            Process.3(Layout).2: Rings 'image' and 'imageArea' are added to the layout. 
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:ImageResizer.Resizing.AbstractImageProcessor.PostLayoutImage(ImageResizer.Resizing.ImageState)">
            <summary>
            Process.3(Layout).3: Add rings here to insert them between the image area and the padding
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:ImageResizer.Resizing.AbstractImageProcessor.LayoutPadding(ImageResizer.Resizing.ImageState)">
            <summary>
            Process.3(Layout).4: Ring "padding" is added to the layout
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:ImageResizer.Resizing.AbstractImageProcessor.PostLayoutPadding(ImageResizer.Resizing.ImageState)">
            <summary>
            Process.3(Layout).5: Add rings here to insert them between the padding and the border
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:ImageResizer.Resizing.AbstractImageProcessor.LayoutBorder(ImageResizer.Resizing.ImageState)">
            <summary>
            Process.3(Layout).6: Ring "border" is added to the layout
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:ImageResizer.Resizing.AbstractImageProcessor.PostLayoutBorder(ImageResizer.Resizing.ImageState)">
            <summary>
            Process.3(Layout).7: Add rings here to insert them between the border and the effect rings
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:ImageResizer.Resizing.AbstractImageProcessor.LayoutEffects(ImageResizer.Resizing.ImageState)">
            <summary>
            Process.3(Layout).8: Effects such as 'shadow' are added here.
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:ImageResizer.Resizing.AbstractImageProcessor.PostLayoutEffects(ImageResizer.Resizing.ImageState)">
            <summary>
            Process.3(Layout).9: Add rings here to insert them between the effects and the margin
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:ImageResizer.Resizing.AbstractImageProcessor.LayoutMargin(ImageResizer.Resizing.ImageState)">
            <summary>
            Process.3(Layout).10: Margins are added to the layout
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:ImageResizer.Resizing.AbstractImageProcessor.PostLayoutMargin(ImageResizer.Resizing.ImageState)">
            <summary>
            Process.3(Layout).11: Add rings here to insert them around the margin. Rings will be outermost
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:ImageResizer.Resizing.AbstractImageProcessor.LayoutRotate(ImageResizer.Resizing.ImageState)">
            <summary>
            Process.3(Layout).anytime: Occurs when the layout is rotated. May be called anytime during Layout()
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:ImageResizer.Resizing.AbstractImageProcessor.PostLayoutRotate(ImageResizer.Resizing.ImageState)">
            <summary>
            Process.3(Layout).anytime: Occurs after the layout is rotated. May be called anytime during Layout()
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:ImageResizer.Resizing.AbstractImageProcessor.LayoutNormalize(ImageResizer.Resizing.ImageState)">
            <summary>
            Process.3(Layout).anytime: Occurs when the layout is normalized to 0,0. May be called anytime during Layout()
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:ImageResizer.Resizing.AbstractImageProcessor.PostLayoutNormalize(ImageResizer.Resizing.ImageState)">
            <summary>
            Process.3(Layout).anytime: Occurs after the layout is normalized. May be called anytime during Layout()
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:ImageResizer.Resizing.AbstractImageProcessor.LayoutRound(ImageResizer.Resizing.ImageState)">
            <summary>
            Process.3(Layout).anytime: Occurs when the layout point values are rounded to integers. May be called anytime during Layout()
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:ImageResizer.Resizing.AbstractImageProcessor.PostLayoutRound(ImageResizer.Resizing.ImageState)">
            <summary>
            Process.3(Layout).anytime: Occurs after the layout point values are rounded to integers. May be called anytime during Layout()
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:ImageResizer.Resizing.AbstractImageProcessor.EndLayout(ImageResizer.Resizing.ImageState)">
            <summary>
            Process.3(Layout).12: Occurs once layout has finished. No more changes should occur to points or rings in the layout after this method. destSize is calculated here.
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:ImageResizer.Resizing.AbstractImageProcessor.PrepareDestinationBitmap(ImageResizer.Resizing.ImageState)">
            <summary>
            Process.4: The destination bitmap is created and sized based destSize. A graphics object is initialized for rendering.
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:ImageResizer.Resizing.AbstractImageProcessor.Render(ImageResizer.Resizing.ImageState)">
            <summary>
            Process.5(Render) Rendering. Do not return RequestedAction.Cancel unless  you want to replace the entire rendering system.
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:ImageResizer.Resizing.AbstractImageProcessor.RenderBackground(ImageResizer.Resizing.ImageState)">
            <summary>
            Process.5(Render).1 The background color is rendered
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:ImageResizer.Resizing.AbstractImageProcessor.PostRenderBackground(ImageResizer.Resizing.ImageState)">
            <summary>
            Process.5(Render).2 After the background color is rendered
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:ImageResizer.Resizing.AbstractImageProcessor.RenderEffects(ImageResizer.Resizing.ImageState)">
            <summary>
            Process.5(Render).3 Effects (such as a drop shadow or outer glow) are rendered
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:ImageResizer.Resizing.AbstractImageProcessor.PostRenderEffects(ImageResizer.Resizing.ImageState)">
            <summary>
            Process.5(Render).4 After outer effects are rendered
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:ImageResizer.Resizing.AbstractImageProcessor.RenderPadding(ImageResizer.Resizing.ImageState)">
            <summary>
            Process.5(Render).5 Image padding is drawn
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:ImageResizer.Resizing.AbstractImageProcessor.PostRenderPadding(ImageResizer.Resizing.ImageState)">
            <summary>
            Process.5(Render).6 After image padding is drawn
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:ImageResizer.Resizing.AbstractImageProcessor.CreateImageAttribues(ImageResizer.Resizing.ImageState)">
            <summary>
            Process.5(Render).7: An ImageAttributes instance is created if it doesn't already exist.
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:ImageResizer.Resizing.AbstractImageProcessor.PostCreateImageAttributes(ImageResizer.Resizing.ImageState)">
            <summary>
            Process.5(Render).8: The ImageAttributes instance exists and can be modified or replaced.
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:ImageResizer.Resizing.AbstractImageProcessor.RenderImage(ImageResizer.Resizing.ImageState)">
            <summary>
            Process.5(Render).9: The image is copied to the destination parallelogram specified by ring 'image'. 
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:ImageResizer.Resizing.AbstractImageProcessor.PostRenderImage(ImageResizer.Resizing.ImageState)">
            <summary>
            Process.5(Render).10: After the image is drawn
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:ImageResizer.Resizing.AbstractImageProcessor.RenderBorder(ImageResizer.Resizing.ImageState)">
            <summary>
            Process.5(Render).11: The border is rendered
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:ImageResizer.Resizing.AbstractImageProcessor.PostRenderBorder(ImageResizer.Resizing.ImageState)">
            <summary>
            Process.5(Render).12: After the border is drawn
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:ImageResizer.Resizing.AbstractImageProcessor.PreRenderOverlays(ImageResizer.Resizing.ImageState)">
            <summary>
            Process.5(Render).13: Any last-minute changes before watermarking or overlays are applied
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:ImageResizer.Resizing.AbstractImageProcessor.RenderOverlays(ImageResizer.Resizing.ImageState)">
            <summary>
            Process.5(Render).14: Watermarks can be rendered here. All image processing should be done
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:ImageResizer.Resizing.AbstractImageProcessor.PreFlushChanges(ImageResizer.Resizing.ImageState)">
            <summary>
            Process.5(Render).15: Called before changes are flushed and the graphics object is destroyed.
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:ImageResizer.Resizing.AbstractImageProcessor.FlushChanges(ImageResizer.Resizing.ImageState)">
            <summary>
            Process.5(Render).16: Changes are flushed to the bitmap here and the graphics object is destroyed.
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:ImageResizer.Resizing.AbstractImageProcessor.PostFlushChanges(ImageResizer.Resizing.ImageState)">
            <summary>
            Process.5(Render).17: Changes have been flushed to the bitmap, but the final bitmap has not been flipped yet.
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:ImageResizer.Resizing.AbstractImageProcessor.ProcessFinalBitmap(ImageResizer.Resizing.ImageState)">
            <summary>
            Process.6: Non-rendering changes to the bitmap object occur here, such as flipping. The graphics object is unavailable.
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:ImageResizer.Resizing.AbstractImageProcessor.EndProcess(ImageResizer.Resizing.ImageState)">
            <summary>
            Process.7: Layout and rendering are both complete.
            </summary>
            <param name="s"></param>
        </member>
        <member name="T:ImageResizer.Plugins.IPlugin">
            <summary>
            All plugins must implement this. Enables web.config addition and removal.
            </summary>
        </member>
        <member name="M:ImageResizer.Plugins.IPlugin.Install(ImageResizer.Configuration.Config)">
            <summary>
            Installs the plugin in the specified Config instance. The plugin must handle all the work of loading settings, registering the plugin etc.
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Plugins.IPlugin.Uninstall(ImageResizer.Configuration.Config)">
            <summary>
            Uninstalls the plugin. Should reverse all changes made during Install
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Plugins.Basic.Trial.Uninstall(ImageResizer.Configuration.Config)">
            <summary>
            The Trial plugin cannot be removed using this method.
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="T:ImageResizer.Plugins.Basic.NoCache">
            <summary>
            Default cache when DiskCache isn't installed. 
            Useful for debugging purposes but unsuited for production use, and will use large quanities of RAM. (Scales to fewer than 5 concurrent requests).
            Serves content directly to the client from memory.
            </summary>
        </member>
        <member name="T:ImageResizer.Caching.ICache">
            <summary>
            Provides caching behavior
            </summary>
        </member>
        <member name="M:ImageResizer.Caching.ICache.CanProcess(System.Web.HttpContext,ImageResizer.Caching.IResponseArgs)">
            <summary>
            Returns false if the cache is unable to process the request. If false, the caller should fall back to a different cache
            </summary>
            <param name="current"></param>
            <param name="e"></param>
        </member>
        <member name="M:ImageResizer.Caching.ICache.Process(System.Web.HttpContext,ImageResizer.Caching.IResponseArgs)">
            <summary>
            Must update the cache if needed, then either rewrite, redirect or serve the cached data.
            </summary>
            <param name="current"></param>
            <param name="e"></param>
        </member>
        <member name="M:ImageResizer.Plugins.Basic.NoCache.Install(ImageResizer.Configuration.Config)">
            <summary>
            Installs the caching system as the first choice.
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Plugins.Basic.NoCache.Uninstall(ImageResizer.Configuration.Config)">
            <summary>
            Removes the plugin. 
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Plugins.Basic.NoCache.Process(System.Web.HttpContext,ImageResizer.Caching.IResponseArgs)">
            <summary>
            Sends the response directly to the client with no caching logic.
            </summary>
            <param name="context"></param>
            <param name="e"></param>
        </member>
        <member name="T:ImageResizer.Caching.ICacheProvider">
            <summary>
            Provides cache selection logic
            </summary>
        </member>
        <member name="M:ImageResizer.Caching.ICacheProvider.GetCachingSystem(System.Web.HttpContext,ImageResizer.Caching.IResponseArgs)">
            <summary>
            Selects a caching system for the specified request and response
            </summary>
            <param name="context"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:ImageResizer.Caching.ResponseArgs">
            <summary>
            IResponseArgs implementation
            </summary>
        </member>
        <member name="T:ImageResizer.Caching.IResponseArgs">
            <summary>
            A collection of data and callbacks that can be passed to a caching object.
            </summary>
        </member>
        <member name="P:ImageResizer.Caching.IResponseArgs.RequestKey">
            <summary>
            A string derived from the request, which can contain any kind of data. To get a cache key that varies with the source modified date, 
            it should be combined with the value of GetModifiedDateUTC() and hashed.
            </summary>
        </member>
        <member name="P:ImageResizer.Caching.IResponseArgs.RewrittenQuerystring">
            <summary>
            The rewritten querystring. Can be useful for caching systems that accept querystring arguments.
            </summary>
        </member>
        <member name="P:ImageResizer.Caching.IResponseArgs.SuggestedExtension">
            <summary>
            A file extension appropriate for the resulting data. May be different than the extension on the original request.
            </summary>
        </member>
        <member name="P:ImageResizer.Caching.IResponseArgs.ResponseHeaders">
            <summary>
            The content-type of the data, among other things. Set ResponseHeaders.ApplyDuringPreSendRequestHeaders to automatically
            write caching headers based on ResponseHeaders values.
            Caching systems that use redirects may use this data as hints when configuring caching on the remote server.
            </summary>
        </member>
        <member name="P:ImageResizer.Caching.IResponseArgs.GetModifiedDateUTC">
            <summary>
            A delegate that returns the modified date of the source data.
            </summary>
        </member>
        <member name="P:ImageResizer.Caching.IResponseArgs.HasModifiedDate">
            <summary>
            True if a modified date is available for verifying cache integrity.
            </summary>
        </member>
        <member name="P:ImageResizer.Caching.IResponseArgs.ResizeImageToStream">
            <summary>
            A callback method that will resize, encode, and write the data to the given stream.
            </summary>
        </member>
        <member name="P:ImageResizer.Caching.ResponseArgs.GetModifiedDateUTC">
            <summary>
            A callback method to return the last modified date of the source file if available, or DateTime.MinValue if not.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ImageResizer.Caching.ResponseArgs.ResizeImageToStream">
            <summary>
            A callback method that will resize and encode the image into a stream.
            </summary>
        </member>
        <member name="P:ImageResizer.Caching.ResponseArgs.RequestKey">
            <summary>
            A value derived from the request. Can be used as a cache key. 
            </summary>
        </member>
        <member name="P:ImageResizer.Caching.ResponseArgs.HasModifiedDate">
            <summary>
            True if the source file/record has a modified date
            </summary>
        </member>
        <member name="P:ImageResizer.Caching.ResponseArgs.ResponseHeaders">
            <summary>
            The content-type of the data, among other things. Set ResponseHeaders.ApplyDuringPreSendRequestHeaders to automatically
            write caching headers based on ResponseHeaders values.
            Caching systems that use redirects may use this data as hints when configuring caching on the remote server.
            </summary>
        </member>
        <member name="P:ImageResizer.Caching.ResponseArgs.RewrittenQuerystring">
            <summary>
            The rewritten querystring. Can be useful for caching systems that accept querystring arguments.
            </summary>
        </member>
        <member name="T:ImageResizer.Resizing.BitmapTag">
            <summary>
            
            </summary>
        </member>
        <member name="T:ImageResizer.Plugins.IVirtualBitmapFile">
            <summary>
            For virtual files who want to provide their data in Bitmap form (like a PSD reader or gradient generator)
            </summary>
        </member>
        <member name="M:ImageResizer.Plugins.IVirtualBitmapFile.GetBitmap">
            <summary>
            Returns a Bitmap instance of the file's contents
            </summary>
            <returns></returns>
        </member>
        <member name="T:ImageResizer.Caching.ResizeImageDelegate">
            <summary>
            A callback method that will resize, encode, and write the data to the given stream.
            Callback may throw FileNotFoundException when running on top of an optimistic VPP
            </summary>
        </member>
        <member name="T:ImageResizer.Caching.ModifiedDateDelegate">
            <summary>
            A callback method to return the last modified date of the source file if available, or DateTime.MinValue if not available.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ImageResizer.Plugins.Basic.DefaultEncoder">
            <summary>
            Provides basic encoding functionality for Jpeg, png, and gif output. Allows adjustable Jpeg compression, but doesn't implement indexed PNG files or quantized GIF files.
            </summary>
        </member>
        <member name="T:ImageResizer.Encoding.IEncoder">
            <summary>
            An image encoder. Exposes methods for suitability checking, encoding, transparency compatibility checking, and mime-type/extension calculation.
            </summary>
        </member>
        <member name="M:ImageResizer.Encoding.IEncoder.CreateIfSuitable(ImageResizer.ResizeSettings,System.Object)">
            <summary>
            If the encoder can handle the requirements specified by 'settings' and 'source', it should return an encoder instance.
            If not, it should return null.
            </summary>
            <param name="settings">Request settings, like format, quality, colors, dither, etc.</param>
            <param name="original">May be a Drawing.Image instance, a path, or null. To provide both, set Image.tag to the path. Helps the encoder detect the original format if the format was not specified.
            May also be used for palette generation hinting by some encoders.</param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Encoding.IEncoder.Write(System.Drawing.Image,System.IO.Stream)">
            <summary>
            Encodes the image to the specified stream 
            </summary>
            <param name="s"></param>
        </member>
        <member name="P:ImageResizer.Encoding.IEncoder.SupportsTransparency">
            <summary>
            True if the output format will support transparency as it is currently configured.
            </summary>
        </member>
        <member name="P:ImageResizer.Encoding.IEncoder.MimeType">
            <summary>
            Returns the appropriate mime-time for the output format as currently configured.
            </summary>
        </member>
        <member name="P:ImageResizer.Encoding.IEncoder.Extension">
            <summary>
            Returns a file extension appropriate for the output format as currently configured, without a leading dot.
            </summary>
        </member>
        <member name="T:ImageResizer.Plugins.IQuerystringPlugin">
            <summary>
            For plugins that access the query string (important!)
            </summary>
        </member>
        <member name="M:ImageResizer.Plugins.IQuerystringPlugin.GetSupportedQuerystringKeys">
            <summary>
            If the plugin reads any values from the querystring, the names of the keys should be specified here. 
            This information is required so that the HttpModule knows when to handle an image request.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Plugins.Basic.DefaultEncoder.IsValidOutputFormat(System.Drawing.Imaging.ImageFormat)">
            <summary>
            Returns true if the this encoder supports the specified image format
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Plugins.Basic.DefaultEncoder.Write(System.Drawing.Image,System.IO.Stream)">
            <summary>
            Writes the specified image to the stream using Quality and OutputFormat
            </summary>
            <param name="image"></param>
            <param name="s"></param>
        </member>
        <member name="M:ImageResizer.Plugins.Basic.DefaultEncoder.GetRequestedFormat(System.String,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Tries to parse an ImageFormat from the settings.Format value.
            If an unrecogized format is specified, returns null.
            If an unsupported format is specified, it is returned.
            If *no* format is specified, returns defaultValue.
            </summary>
            <param name="settings"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Plugins.Basic.DefaultEncoder.GetOriginalFormat(System.Object)">
            <summary>
            Attempts to determine the ImageFormat of the source image. First attempts to parse the path, if a string is present in original.Tag. (or if 'original' is a string)
            Falls back to using original.RawFormat. Returns null if both 'original' is null.
            RawFormat has a bad reputation, so this may return unexpected values, like MemoryBitmap or something in some situations.
            </summary>
            <param name="img">The image we are encoding</param>
            <param name="original">The source image that was loaded from a stream, or a string path</param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Plugins.Basic.DefaultEncoder.GetImageFormatFromPhysicalPath(System.String)">
            <summary>
            Returns the ImageFormat enumeration value based on the extension in the specified physical path. Extensions can lie, just a guess.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Plugins.Basic.DefaultEncoder.GetExtensionFromImageFormat(System.Drawing.Imaging.ImageFormat)">
            <summary>
            Returns an string instance from the specfied ImageFormat. First matching entry in imageExtensions is used.
            Returns null if not recognized.
            </summary>
            <param name="ext"></param>
            <returns></returns>
        </member>
        <member name="F:ImageResizer.Plugins.Basic.DefaultEncoder._imageExtensions">
            <summary>
            Returns a dict of (lowercase invariant) image extensions and ImageFormat values
            </summary>
        </member>
        <member name="M:ImageResizer.Plugins.Basic.DefaultEncoder.GetImageFormatFromExtension(System.String)">
            <summary>
            Returns an ImageFormat instance from the specfied file extension. Extensions lie sometimes, just a guess.
            returns null if not recognized.
            </summary>
            <param name="ext"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Plugins.Basic.DefaultEncoder.addImageExtension(System.String,System.Drawing.Imaging.ImageFormat)">
            <summary>
            NOT thread-safe! 
            </summary>
            <param name="extension"></param>
            <param name="matchingFormat"></param>
        </member>
        <member name="M:ImageResizer.Plugins.Basic.DefaultEncoder.GetContentTypeFromImageFormat(System.Drawing.Imaging.ImageFormat)">
            <summary>
            Supports Png, Jpeg, Gif, Bmp, and Tiff. Throws a ArgumentOutOfRangeException if not png, jpeg, gif, bmp, or tiff
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Plugins.Basic.DefaultEncoder.GetImageCodeInfo(System.String)">
            <summary>
            Returns the first ImageCodeInfo instance with the specified mime type. Returns null if there are no matches.
            </summary>
            <param name="mimeType"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Plugins.Basic.DefaultEncoder.SaveJpeg(System.Drawing.Image,System.IO.Stream,System.Int32)">
            <summary>
            Saves the specified image to the specified stream using jpeg compression of the specified quality.
            </summary>
            <param name="b"></param>
            <param name="quality">A number between 0 and 100. Defaults to 90 if passed a negative number. Numbers over 100 are truncated to 100. 
            90 is a *very* good setting.
            </param>
            <param name="target"></param>
        </member>
        <member name="M:ImageResizer.Plugins.Basic.DefaultEncoder.SavePng(System.Drawing.Image,System.IO.Stream)">
            <summary>
            Saves the image in png form. If Stream 'target' is not seekable, a temporary MemoryStream will be used to buffer the image data into the stream
            </summary>
            <param name="img"></param>
            <param name="target"></param>
        </member>
        <member name="M:ImageResizer.Plugins.Basic.DefaultEncoder.GetSupportedQuerystringKeys">
            <summary>
            Returns the querystring keys used by DefaultEncoder (quality, format, and thumbnail)
            </summary>
            <returns></returns>
        </member>
        <member name="P:ImageResizer.Plugins.Basic.DefaultEncoder.OutputFormat">
            <summary>
            If you set this to anything other than Gif, Png, or Jpeg, it will throw an exception. Defaults to Jpeg
            </summary>
        </member>
        <member name="P:ImageResizer.Plugins.Basic.DefaultEncoder.Quality">
            <summary>
            The Jpeg compression quality. 90 is the best setting. Not relevant in Png or Gif compression
            </summary>
        </member>
        <member name="P:ImageResizer.Plugins.Basic.DefaultEncoder.SupportsTransparency">
            <summary>
            Returns true if the desired output type supports transparency.
            </summary>
        </member>
        <member name="P:ImageResizer.Plugins.Basic.DefaultEncoder.MimeType">
            <summary>
            Returns the default mime-type for the OutputFormat
            </summary>
        </member>
        <member name="P:ImageResizer.Plugins.Basic.DefaultEncoder.Extension">
            <summary>
            Returns the default file extesnion for OutputFormat
            </summary>
        </member>
        <member name="T:ImageResizer.Configuration.Xml.Selector">
            <summary>
            Encapsulates a node/attribute selection query, such as "node.node.attribute"
            </summary>
        </member>
        <member name="M:ImageResizer.Configuration.Xml.Selector.GetSublist(System.Int32)">
            <summary>
            Returns a subset of the list starting at the specified index
            </summary>
            <param name="startAt"></param>
            <returns></returns>
        </member>
        <member name="T:ImageResizer.Configuration.PluginConfig">
            <summary>
            Provides thread-safe access to plugin addition, removal, and querying methods
            </summary>
        </member>
        <member name="M:ImageResizer.Configuration.Issues.IssueSink.GetIssues">
            <summary>
            Returns a copy of the list of reported issues.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Configuration.Issues.IssueSink.AcceptIssue(ImageResizer.Configuration.Issues.IIssue)">
            <summary>
            Adds the specified issue to the list unless it is an exact duplicate of another instance.
            </summary>
            <param name="i"></param>
        </member>
        <member name="T:ImageResizer.Encoding.IEncoderProvider">
            <summary>
            A provider (or selector) of IEncoder instances.
            </summary>
        </member>
        <member name="M:ImageResizer.Encoding.IEncoderProvider.GetEncoder(ImageResizer.ResizeSettings,System.Object)">
            <summary>
            Returns an encoder based on the provided settings and the source object
            </summary>
            <param name="settings">Request settings, like format, quality, colors, dither, etc.</param>
            <param name="original">May be a Drawing.Image instance, a path, or null. To provide both, set Image.tag to the path. Helps the encoder detect the original format if the format was not specified.</param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Configuration.PluginConfig.#ctor(ImageResizer.Configuration.Config)">
            <summary>
            Creates a new plugin config section, attached to the specified parent
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:ImageResizer.Configuration.PluginConfig.LoadPlugins">
            <summary>
            Processes the &lt;plugins&gt; section if they are not already loaded. Thread safe.
            Only executes once.
            </summary>
        </member>
        <member name="M:ImageResizer.Configuration.PluginConfig.loadPluginsInternal">
            <summary>
            Not thread safe. Performs actual work.
            </summary>
        </member>
        <member name="M:ImageResizer.Configuration.PluginConfig.GetPlugins(System.Type)">
            <summary>
            Returns the subset of AllPlugins which implement the specified type or interface
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Configuration.PluginConfig.HasPlugin(System.Type)">
            <summary>
            Returns true if at least one plugin of the specified type is registered.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Configuration.PluginConfig.GetAll``1">
            <summary>
            Returns all registered instances of the specified plugins
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Configuration.PluginConfig.Get``1">
            <summary>
            Returns the first registerd instance of the specified plugin. For IMultiInstancePlugins, use GetAll()
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Configuration.PluginConfig.Has``1">
            <summary>
            Returns true if 1 or more instances of the type are registered.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Configuration.PluginConfig.Install(ImageResizer.Plugins.IPlugin)">
            <summary>
            Installs the specified plugin, returning the plugin instance. 
            Convenience method, same as plugin.Install(Config.Current).
            </summary>
            <param name="plugin"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Configuration.PluginConfig.Uninstall(ImageResizer.Plugins.IPlugin)">
            <summary>
            Attempts uninstallation of the specified plugin, returning true if successful.
            Convenience method, same as plugin.Uninstall(Config.Current).
            </summary>
            <param name="plugin"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Configuration.PluginConfig.GetEncoder(ImageResizer.ResizeSettings,System.Object)">
            <summary>
            Returns an instance of the first encoder that claims to be able to handle the specified settings.
            Returns null if no encoders are available.
            </summary>
            <param name="settings">Request settings, like format, quality, colors, dither, etc.</param>
            <param name="original">May be a Drawing.Image instance, a path, or null. To provide both, set Image.tag to the path. Helps the encoder detect the original format if the format was not specified.
            May also be used for palette generation hinting by some encoders.</param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Configuration.PluginConfig.FindPluginType(System.String)">
            <summary>
            Searches all loaded assemblies for the specified type, applying rules and prefixes to resolve the namespace and assembly.
            Returns null if it could not find the type, and logs an issue.
            </summary>
            <param name="searchName"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Configuration.PluginConfig.remove_plugin(System.Object)">
            <summary>
            For use only by plugins during .Uninstall.
            Removes the specified plugin from AllPlugins, QuerystringPlugins, CachingSystems, ImageEncoders, and ImageBuiderExtensions, based
            on which interfaces the instance implements.
            Plugins may register event handlers and modify settings - thus you should use the plugin's method to uninstall them vs. using this method.
            </summary>
            <param name="plugin"></param>
        </member>
        <member name="M:ImageResizer.Configuration.PluginConfig.add_plugin(ImageResizer.Plugins.IPlugin)">
            <summary>
            Only for use by plugins during IPlugin.Install. Call Plugin.Install instead of this method, since plugins often must perform other initialization actions.
            Adds the specified plugin to AllPlugins, QuerystringPlugins, CachingSystems, ImageEncoders, and ImageBuiderExtensions, based
            on which interfaces the instance implements. For ICache and IEncoder, the plugin is inserted at the beginning of CachingSystems and ImageEncoders respectively.
            To reiterate, plugins may register event handlers and modify settings - thus you should use the plugin's method to uninstall them vs. using this method.
            Will not register a plugin that is already installed, unless it implementes IMultiInstancePlugin.
            </summary>
            <param name="plugin"></param>
        </member>
        <member name="M:ImageResizer.Configuration.PluginConfig.RemoveAll">
            <summary>
            Removes all plugins, of every kind. Logs any errors encountered. (Not all plugins support uninstallation)
            </summary>
        </member>
        <member name="P:ImageResizer.Configuration.PluginConfig.PluginsLoaded">
            <summary>
            Returns true if the &lt;plugins&gt; section has been processed
            </summary>
        </member>
        <member name="P:ImageResizer.Configuration.PluginConfig.ImageBuilderExtensions">
            <summary>
            Currently registered set of ImageBuilderExtensions. 
            </summary>
        </member>
        <member name="P:ImageResizer.Configuration.PluginConfig.ImageEncoders">
            <summary>
            Currently registered IEncoders. 
            </summary>
        </member>
        <member name="P:ImageResizer.Configuration.PluginConfig.CachingSystems">
            <summary>
            Currently registered ICache instances
            </summary>
        </member>
        <member name="P:ImageResizer.Configuration.PluginConfig.QuerystringPlugins">
            <summary>
            Plugins which accept querystring arguments are registered here.
            </summary>
        </member>
        <member name="P:ImageResizer.Configuration.PluginConfig.FileExtensionPlugins">
            <summary>
            Plugins which accept new file extensions (in the url) are registered here.
            </summary>
        </member>
        <member name="P:ImageResizer.Configuration.PluginConfig.VirtualProviderPlugins">
            <summary>
            Plugins which provide virtual files are registered here.
            </summary>
        </member>
        <member name="P:ImageResizer.Configuration.PluginConfig.AllPlugins">
            <summary>
            All plugins should be registered here. Used for diagnostic purposes.
            </summary>
        </member>
        <member name="M:ImageResizer.Configuration.IPipelineConfig.IsAcceptedImageType(System.String)">
            <summary>
            True if the specified extension is one that the pipeline can handle
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Configuration.IPipelineConfig.HasPipelineDirective(System.Collections.Specialized.NameValueCollection)">
            <summary>
            True if the querystring contains any directives that are understood by the pipeline
            </summary>
            <param name="q"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Configuration.IPipelineConfig.TrimFakeExtensions(System.String)">
            <summary>
            Removes the first fake extension detected at the end of 'path' (like image.jpg.ashx -> image.jpg).
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Configuration.IPipelineConfig.GetImageBuilder">
            <summary>
            Returns an ImageBuilder instance to use for image processing.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Configuration.IPipelineConfig.GetCacheProvider">
            <summary>
            Returns a ICacheProvider instance that provides caching system selection and creation.
            </summary>
            <param name="context"></param>
            <param name="virtualPathAndQuerystring"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Configuration.IPipelineConfig.FileExists(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Returns true if (a) A registered IVirtualImageProvider says it exists, or (b) if the VirtualPathProvider chain says it exists.
            </summary>
            <param name="virtualPath"></param>
            <param name="queryString"></param>
            <returns></returns>
        </member>
        <member name="P:ImageResizer.Configuration.IPipelineConfig.ModifiedQueryStringKey">
            <summary>
            The key in Context.Items to store the modified querystring (i.e, post-rewrite). 
            Allows VirtualPathProviders to access the rewritten data.
            </summary>
        </member>
        <member name="P:ImageResizer.Configuration.IPipelineConfig.ResponseArgsKey">
            <summary>
            The key in Context.Items to store the IResponseArgs object
            </summary>
        </member>
        <member name="P:ImageResizer.Configuration.IPipelineConfig.ModifiedPathKey">
            <summary>
             The key in Context.Items to access a the path to use instead of Request.path
            </summary>
        </member>
        <member name="P:ImageResizer.Configuration.IPipelineConfig.VppUsage">
            <summary>
            The behavior to use when accessing the file system.
            </summary>
        </member>
        <member name="P:ImageResizer.Configuration.IPipelineConfig.PreRewritePath">
            <summary>
            Returns the value of Context.Items["resizer.newPath"] if present. If not, returns FilePath + PathInfo.
            Sets Context.Items["resizer.newPath"]. 
            Only useful during the Pipeline.PostAuthorizeRequestStart event.
            </summary>
        </member>
        <member name="M:ImageResizer.Configuration.PipelineConfig._cacheUrlData">
            <summary>
            Populates the cache if it is empty. Not thread safe.
            </summary>
        </member>
        <member name="M:ImageResizer.Configuration.PipelineConfig.IsAcceptedImageType(System.String)">
            <summary>
            The specified path must not include a querystring. Slashes, spaces, question marks, ampersands, and colons are not permitted in the extension.
            If it contains a multipart extension like .txt.zip, only "zip" will be recognized.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Configuration.PipelineConfig.HasPipelineDirective(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Returns true if any of the querystring keys match any of the directives supported by the pipeline (such as width, height, format, bgcolor, etc)
            </summary>
            <param name="q"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Configuration.PipelineConfig.TrimFakeExtensions(System.String)">
            <summary>
            Removes the first fake extensionm detected at the end of 'path'
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Configuration.PipelineConfig.GetFile(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Returns either an IVirtualFile instance or a VirtualFile instance.
            </summary>
            <param name="virtualPath"></param>
            <param name="queryString"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Configuration.PipelineConfig.FileExists(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Returns true if (a) A registered IVirtualImageProvider says it exists, or (b) if the VirtualPathProvider chain says it exists.
            </summary>
            <param name="virtualPath"></param>
            <param name="queryString"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Configuration.PipelineConfig.GetCachingSystem(System.Web.HttpContext,ImageResizer.Caching.IResponseArgs)">
            <summary>
            Cache selection occurs as follows: (1) The first registered CachingSystem that returns  true from .CanProcess() is the default
            (2) The SelectCachingSystem event is fired, allowing handlers to modify the selected cache. 
            This method may return null. 
            </summary>
            <param name="context"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="P:ImageResizer.Configuration.PipelineConfig.AcceptedImageExtensions">
            <summary>
            Returns a unqiue copy of the image extensions supported by the pipeline. Performs a cached query to all registered IQuerystringPlugin instances.
            Use IsAcceptedImageType for better performance.
            </summary>
        </member>
        <member name="P:ImageResizer.Configuration.PipelineConfig.SupportedQuerystringKeys">
            <summary>
            Returns a unqiue copy of all querystring keys supported by the pipeline. Performs a cached query to all registered IQuerystringPlugin instances.
            Use HasPipelineDirective for better performance. (binary search)
            </summary>
        </member>
        <member name="P:ImageResizer.Configuration.PipelineConfig.FakeExtensions">
            <summary>
            Cached access to pipeline.fakeExtensions
            </summary>
        </member>
        <member name="P:ImageResizer.Configuration.PipelineConfig.PreRewritePath">
            <summary>
            Returns the value of Context.Items["resizer.newPath"] if present. If not, returns FilePath + PathInfo.
            Sets Context.Items["resizer.newPath"]. 
            Only useful during the Pipeline.PostAuthorizeRequestStart event.
            </summary>
        </member>
        <member name="P:ImageResizer.Configuration.PipelineConfig.ModifiedQueryString">
            <summary>
            Returns the modified query string. If never set, returns a copy of Request.QueryString.
            Returns the same instance if called multiple times. Copy it if you want to make changes without causing issues.
            </summary>
        </member>
        <member name="P:ImageResizer.Configuration.PipelineConfig.SkipFileTypeCheck">
            <summary>
            Get or sets whether the file extension check should be applied to the current request. Defaults to true.
            If set to true, will only affect the current request, and will only cause the Resizer to evaluate the rewriting rules on the request.
            Processing may still not occur if no querystring values are specified. Add 'cache=always' to force caching to occur.
            </summary>
        </member>
        <member name="P:ImageResizer.Configuration.PipelineConfig.IsHandlingRequest">
            <summary>
            Returns true if the current request is being processed and/or cached by the pipeline.
            Will return false until *after* the FileExists method is called on the VirtualPathProviders, which is after the 
            AuthorizeImage event fires. 
            This will return a usable value if used from VirtualFile.Open(), or if used inside the PreHandleImage event or later.
            </summary>
        </member>
        <member name="E:ImageResizer.Configuration.PipelineConfig.OnFirstRequest">
            <summary>
            Fired once, on the first PostAuthorizeRequest event.
            </summary>
        </member>
        <member name="E:ImageResizer.Configuration.PipelineConfig.PostAuthorizeRequestStart">
            <summary>
            Fires during the PostAuthorizeRequest phase, prior to any module-specific logic.
            Executes for every request to the website. Use only as a last resort. Other events occur only for image requests, and thus have lower overhead.
            </summary>
        </member>
        <member name="E:ImageResizer.Configuration.PipelineConfig.Rewrite">
            <summary>
            Fired during PostAuthorizeRequest, after ResizeExtension has been removed.
            On fired on requests with extensions that match supported image types.
            <para> 
            You can add additonal supported image extentions by registering a plugin that implementes IQuerystringPlugin, or you can add an 
            extra extension in the URL and remove it here. Example: .psd.jpg</para>
            </summary>
        </member>
        <member name="E:ImageResizer.Configuration.PipelineConfig.RewriteDefaults">
            <summary>
            Fired during PostAuthorizeRequest, after Rewrite.
            Any changes made here (which conflict) will be overwritten by the the current querystring values. I.e, this is a good place to specify default settings.
            <para>Only fired on accepted image types. (see Rewrite)</para>
            </summary>
        </member>
        <member name="E:ImageResizer.Configuration.PipelineConfig.PostRewrite">
            <summary>
            Fired after all other rewrite events.
            <para>Only fired on accepted image types. (see Rewrite)</para>
            </summary>
        </member>
        <member name="E:ImageResizer.Configuration.PipelineConfig.AuthorizeImage">
            <summary>
            Fired after all rewriting is finished.
            e.AllowAccess defaults to the result of the UrlAuthorization module's verdict. It can be changed. 
            Set e.AllowAccess to true to cause and 403 Access Dened result.
            </summary>
        </member>
        <member name="E:ImageResizer.Configuration.PipelineConfig.ImageMissing">
            <summary>
            Fired when the specified image doesn't exist. Only called for images that would normally be processed.
            May be called during PostAuthorizeRequest or later - End the request completely with a redirect if you want alternate behavior.
            </summary>
        </member>
        <member name="E:ImageResizer.Configuration.PipelineConfig.PreHandleImage">
            <summary>
            Fired immediately before the image request is sent off to the caching system for proccessing.
            Allows modification of response headers, caching arguments, and callbacks.
            </summary>
        </member>
        <member name="P:ImageResizer.Configuration.PipelineConfig.ProcessedCount">
            <summary>
            The number of images processed by this pipeline.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:ImageResizer.Plugins.Basic.Gradient" -->
        <member name="T:ImageResizer.Plugins.IVirtualImageProvider">
            <summary>
            Implement this to allow your class (or VirtualPathProvider subclass) to be used without registering it with the whole ASP.NET system.
            </summary>
        </member>
        <member name="M:ImageResizer.Plugins.IVirtualImageProvider.FileExists(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Returns true if the specified file exists.
            </summary>
            <param name="virtualPath"></param>
            <param name="queryString"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Plugins.IVirtualImageProvider.GetFile(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Returns a virtual file instance for the specified path and querystring.
            </summary>
            <param name="virtualPath"></param>
            <param name="queryString"></param>
            <returns></returns>
        </member>
        <member name="F:ImageResizer.Resizing.LayoutBuilder.ring">
            <summary>
            An ordered, named collection of polygons.
            pointsToTranslate, imageOuterEdge, imageAreaOuterEdge.
            
            
            </summary>
        </member>
        <member name="M:ImageResizer.Resizing.LayoutBuilder.AddRing(System.String,ImageResizer.Resizing.BoxPadding)">
            <summary>
            Inflates the last ring using the specified padding options. Returns the resulting ring object
            </summary>
            <param name="name"></param>
            <param name="padding"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Resizing.LayoutBuilder.GetBoundingBox">
            <summary>
            Gets a bounding box that encloses all rings that don't have ExcludeFromBoundingBox set.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Resizing.LayoutBuilder.Rotate(System.Double,System.Drawing.PointF)">
            <summary>
            Rotates all existing rings (Except those flagged ignore)
            </summary>
            <param name="degrees"></param>
            <param name="origin"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Resizing.LayoutBuilder.Normalize(System.Drawing.PointF)">
            <summary> 
            Normalizes all rings and invisible polygons so that the outermost ring's bounding box starts at the specified orign.
            </summary>
            <param name="origin"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Resizing.LayoutBuilder.Scale(System.Double,System.Drawing.PointF)">
            <summary>
            Scales all rings and invisible polygons by the specified factor, around the specified point.
            </summary>
            <param name="factor"></param>
            <param name="origin"></param>
        </member>
        <member name="M:ImageResizer.Resizing.LayoutBuilder.Shift(System.Drawing.RectangleF,System.Drawing.RectangleF)">
            <summary>
            Translates and scales all rings and invisible polygons as specified. 
            </summary>
            <param name="factor"></param>
            <param name="origin"></param>
        </member>
        <member name="P:ImageResizer.Resizing.LayoutBuilder.Item(System.String)">
            <summary>
            Access and set the Point[] arrays of rings by key. Case-insensitive.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:ImageResizer.Resizing.LayoutBuilder.LastRing">
            <summary>
            Returns the last ring that was added. Only returns PointSets where flags = Ring
            </summary>
        </member>
        <member name="F:ImageResizer.Resizing.LayoutBuilder.PointFlags.Ring">
            <summary>
            This polygon participates in the layout phase, and reserves space when added. Affected by all batch operations. Will be returned by LastRing until a new ring is added. 
            </summary>
        </member>
        <member name="F:ImageResizer.Resizing.LayoutBuilder.PointFlags.Invisible">
            <summary>
            Doesn't participate in layout, takes no space, but is affected by batch operations. Will never be returned by LastRing and ignored when calculating bounding boxes.
            </summary>
        </member>
        <member name="F:ImageResizer.Resizing.LayoutBuilder.PointFlags.Ignored">
            <summary>
            Completely ignored by all operations, left intact.
            </summary>
        </member>
        <member name="P:ImageResizer.Resizing.LayoutBuilder.PointSet.PointBehavior">
            <summary>
            How the pointsToTranslate should be translated if they are cropped out of the destination image.
            </summary>
        </member>
        <member name="T:ImageResizer.Resizing.BoxPadding">
            <summary>
            Represents the widths of edges of a box.
            </summary>
        </member>
        <member name="M:ImageResizer.Resizing.BoxPadding.#ctor(System.Double)">
            <summary>
            Create a box with all edges the same width.
            </summary>
            <param name="all"></param>
        </member>
        <member name="M:ImageResizer.Resizing.BoxPadding.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a box, specifying individual widths for each size
            </summary>
            <param name="left"></param>
            <param name="top"></param>
            <param name="right"></param>
            <param name="bottom"></param>
        </member>
        <member name="M:ImageResizer.Resizing.BoxPadding.#ctor(ImageResizer.Resizing.BoxPadding)">
            <summary>
            Copies the specified BoxPadding instance
            </summary>
            <param name="original"></param>
        </member>
        <member name="M:ImageResizer.Resizing.BoxPadding.SetAll(System.Double)">
            <summary>
            Sets the width of all edges, returning a new instance
            </summary>
            <param name="all"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Resizing.BoxPadding.GetEdgeOffsets">
            <summary>
            Gets edge offsets as a clockwise array, starting with Top.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ImageResizer.Resizing.BoxPadding.All">
            <summary>
            Returns -1 unless all edges are the same width, in which case that width is returned
            </summary>
        </member>
        <member name="P:ImageResizer.Resizing.BoxPadding.Empty">
            <summary>
            Returns an instance with a width of 0
            </summary>
        </member>
        <member name="P:ImageResizer.Resizing.BoxPadding.IsEmpty">
            <summary>
            Returns true if th
            </summary>
        </member>
        <member name="T:ImageResizer.Caching.IResponseHeaders">
            <summary>
            Allows customization of response headers for a processed image, as well as configuration of the caching system.
            </summary>
        </member>
        <member name="P:ImageResizer.Caching.IResponseHeaders.ContentType">
            <summary>
            The mime-type of the output data. Defaults to null.
            </summary>
        </member>
        <member name="P:ImageResizer.Caching.IResponseHeaders.CacheControl">
            <summary>
            The cache setting. Defaults to private
            </summary>
        </member>
        <member name="P:ImageResizer.Caching.IResponseHeaders.Expires">
            <summary>
            The UTC time at which the cached data should expire. 
            Browsers generally don't re-request resources until the they have expired (unlike modififeddate).
            If MinValue, will be ignored.
            </summary>
        </member>
        <member name="P:ImageResizer.Caching.IResponseHeaders.LastModified">
            <summary>
            The UTC modified date send with the response. Used by browsers with If-Modified-Since to check a cached value is still valid.
            If = MinValue, will be ignored.
            </summary>
        </member>
        <member name="P:ImageResizer.Caching.IResponseHeaders.ValidUntilExpires">
            <summary>
            When true: If a client requests a refresh, the response will *still* be served from the server cache.
            Defaults to false
            </summary>
        </member>
        <member name="P:ImageResizer.Caching.IResponseHeaders.SuppressVaryHeader">
            <summary>
            ASP.Net sometimes sends Vary: * which obliterates caching. Vary is to be avoided anyhow.
            Defaults to true
            </summary>
        </member>
        <member name="P:ImageResizer.Caching.IResponseHeaders.DefaultHeaders">
            <summary>
            These headers should be applied first, prior to the application of other settings
            </summary>
        </member>
        <member name="P:ImageResizer.Caching.IResponseHeaders.Headers">
            <summary>
            These headers are applied after applying all of the other settings. (and they will overwrite exisiting values).
            </summary>
        </member>
        <member name="P:ImageResizer.Caching.IResponseHeaders.ServerCacheDependencies">
            <summary>
            Returns a collection of dependencies used for invalidating the server cache. 
            Note, having items here will disable kernel-mode caching. Perhaps it is better to simply use LastModified
            </summary>
            <returns></returns>
        </member>
        <member name="P:ImageResizer.Caching.IResponseHeaders.ApplyToResponse">
            <summary>
            A delegate method to apply the values stored in IResponseHeaders to the specified HttpContext.
            </summary>
        </member>
        <member name="P:ImageResizer.Caching.IResponseHeaders.ApplyDuringPreSendRequestHeaders">
            <summary>
            True if the application should automatically execute ApplyToResponse() during the PreSendRequestHeaders event.
            </summary>
        </member>
        <member name="T:ImageResizer.Plugins.Basic.VirtualFolder">
            <summary>
            Functions exactly like an IIS virtual folder, but doesn't require IIS configuration.
            </summary>
        </member>
        <member name="T:ImageResizer.Plugins.IMultiInstancePlugin">
            <summary>
            Tag your plugin with this interface if it supports having multiple instances registered at once
            </summary>
        </member>
        <member name="M:ImageResizer.Plugins.Basic.VirtualFolder.Install(ImageResizer.Configuration.Config)">
            <summary>
            Registers the VirtualFolder plugin as a virtual path provider.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ImageResizer.Plugins.Basic.VirtualFolder.VirtualPath">
            <summary>
            The virtual path served by the VirtualFolder
            </summary>
        </member>
        <member name="P:ImageResizer.Plugins.Basic.VirtualFolder.PhysicalPath">
            <summary>
            The physical path
            </summary>
        </member>
        <member name="T:ImageResizer.Plugins.IVirtualFileWithModifiedDate">
            <summary>
            Always implement this if possible. Allows caching systems to detect changes to source files and invalidate cached data properly.
            </summary>
        </member>
        <member name="P:ImageResizer.Plugins.IVirtualFileWithModifiedDate.ModifiedDateUTC">
            <summary>
            The modified (last write time) of the source file, in UTC form. 
            </summary>
        </member>
        <member name="T:ImageResizer.Configuration.Xml.Node">
            <summary>
            No support for namespaces, no intention of eventual serialization.
            Everything is case-insensitive, but preserves case. Not thread safe.
            </summary>
        </member>
        <member name="M:ImageResizer.Configuration.Xml.Node.#ctor(System.Xml.XmlElement,ImageResizer.Configuration.Issues.IIssueReceiver)">
            <summary>
            Builds a tree of Nodes from the specified XML subtree. Duplicate attributes are sent to 'ir'
            </summary>
            <param name="e"></param>
            <param name="ir"></param>
        </member>
        <member name="M:ImageResizer.Configuration.Xml.Node.childrenByName(System.String)">
            <summary>
            Returns the subset of Children with a matching element name. (Case-insensitive)
            </summary>
            <param name="elementName"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Configuration.Xml.Node.queryAttr(System.String)">
            <summary>
            Queryies the subtree for the specified attribute on the specified element. Example selector: element.element.attrname
            Assumes that the last segment of the selector is an attribute name. 
            Throws an ArgumentException if there is only one segment ( element ).
            Uses the cache.
            </summary>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Configuration.Xml.Node.setAttr(System.String,System.String)">
            <summary>
            Sets the specified attribute value, creating parent elements if needed. Clears the query cache.
            </summary>
            <param name="selector"></param>
            <param name="attrValue"></param>
        </member>
        <member name="M:ImageResizer.Configuration.Xml.Node.setAttr(System.String,System.String,System.String)">
            <summary>
            Sets the specified attribute value, creating parent elements if needed. Clears the query cache.
            </summary>
            <param name="nodeSelector"></param>
            <param name="attrName"></param>
            <param name="attrValue"></param>
        </member>
        <member name="M:ImageResizer.Configuration.Xml.Node.makeNodeTree(System.String)">
            <summary>
            Traverses the specified path, creating any missing elements along the way. Uses existing nodes if found.
            </summary>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Configuration.Xml.Node.query(System.String)">
            <summary>
            Same as query(), except results are cached until clearQueryCache() is called.
            Faster, but can be incorrect if existing nodes are renamed, moved, or deleted.
            </summary>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Configuration.Xml.Node.deepCopy">
            <summary>
            Makes a recusive copy of the subtree, keeping no duplicate references to mutable types.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ImageResizer.Configuration.Xml.Node.Attrs">
            <summary>
            Attributes
            </summary>
        </member>
        <member name="P:ImageResizer.Configuration.Xml.Node.Name">
            <summary>
            The name of the element.
            </summary>
        </member>
        <member name="P:ImageResizer.Configuration.Xml.Node.Children">
            <summary>
            Child nodes
            </summary>
        </member>
        <member name="P:ImageResizer.Configuration.Xml.Node.IsEmpty">
            <summary>
            Returns true if the element has neither attributes nor children.
            </summary>
        </member>
        <member name="M:ImageResizer.Util.StreamUtils.CopyTo(System.IO.Stream,System.IO.Stream)">
            <summary>
            Copies a read stream to a write stream.
            </summary>
            <param name="src"></param>
            <param name="dest"></param>
        </member>
        <member name="T:ImageResizer.ImageProcessingException">
            <summary>
            Represents an non-recoverable exception that occured while processing the image. 
            Possible causes are: a corrupted source file, cache resource timeout (such as a locked file in imagecache),
            unusable configuration (for example, no registered encoders or caches), invalid syntax, or a size limit was exceeded and the request was stopped by the SizeLimiting extension.
            May also be caused by a missing source file/resource, in the form of the ImageMissingException subclass.
            </summary>
        </member>
        <member name="P:ImageResizer.ImageProcessingException.PublicSafeMessage">
            <summary>
            This error message is safe to display to the public (should not contain any sensitive information)
            </summary>
        </member>
        <member name="T:ImageResizer.ImageCorruptedException">
            <summary>
            A source file was corrupted
            </summary>
        </member>
        <member name="T:ImageResizer.ImageMissingException">
            <summary>
            One or more source files was missing
            </summary>
        </member>
        <member name="T:ImageResizer.ServerCacheMode">
            <summary>
            When to disk cache the image
            </summary>
        </member>
        <member name="F:ImageResizer.ServerCacheMode.No">
            <summary>
            Request no caching of the resulting image.
            </summary>
        </member>
        <member name="F:ImageResizer.ServerCacheMode.Always">
            <summary>
            Request that the resulting image always be cached on the server, even if no modifications are made. 
            </summary>
        </member>
        <member name="F:ImageResizer.ServerCacheMode.Default">
            <summary>
            Default caching behavior. Modified images are cached, unmodified images are not cached.
            </summary>
        </member>
        <member name="T:ImageResizer.ProcessWhen">
            <summary>
            When to process and re-encode the image. 
            </summary>
        </member>
        <member name="F:ImageResizer.ProcessWhen.No">
            <summary>
            Request no processing of the image or file (generally used with cache=always).
            The file contents will be used as-is.
            </summary>
        </member>
        <member name="F:ImageResizer.ProcessWhen.Always">
            <summary>
            Require the file or image to be processed. Will cause non-image files to fail with an ImageCorruptedException.
            </summary>
        </member>
        <member name="F:ImageResizer.ProcessWhen.Default">
            <summary>
            Default. Only files with both a supported image extension and resizing settings specified in the querystring will be processed.
            </summary>
        </member>
        <member name="F:ImageResizer.ScaleMode.DownscaleOnly">
            <summary>
            The default. Only downsamples images - never enlarges. If an image is smaller than 'width' and 'height', the image coordinates are used instead.
            </summary>
        </member>
        <member name="F:ImageResizer.ScaleMode.UpscaleOnly">
            <summary>
            Only upscales (zooms) images - never downsamples except to meet web.config restrictions. If an image is larger than 'width' and 'height', the image coordinates are used instead.
            </summary>
        </member>
        <member name="F:ImageResizer.ScaleMode.Both">
            <summary>
            Upscales and downscales images according to 'width' and 'height', within web.config restrictions.
            </summary>
        </member>
        <member name="F:ImageResizer.ScaleMode.UpscaleCanvas">
            <summary>
            When the image is smaller than the requested size, padding is added instead of stretching the image
            </summary>
        </member>
        <member name="F:ImageResizer.StretchMode.Proportionally">
            <summary>
            Maintains aspect ratio. Default.
            </summary>
        </member>
        <member name="F:ImageResizer.StretchMode.Fill">
            <summary>
            Skews image to fit the new aspect ratio defined by 'width' and 'height'
            </summary>
        </member>
        <member name="F:ImageResizer.CropMode.None">
            <summary>
            Default. No cropping - uses letterboxing if strecth=proportionally and both width and height are specified.
            </summary>
        </member>
        <member name="F:ImageResizer.CropMode.Auto">
            <summary>
            Minimally crops to preserve aspect ratio if stretch=proportionally.
            </summary>
        </member>
        <member name="F:ImageResizer.CropMode.Custom">
            <summary>
            Crops using the custom crop rectangle. Letterboxes if stretch=proportionally and both widht and height are specified.
            </summary>
        </member>
        <member name="F:ImageResizer.CropUnits.SourcePixels">
            <summary>
            Indicates the crop units are pixels on the original image.
            </summary>
        </member>
        <member name="F:ImageResizer.CropUnits.Custom">
            <summary>
            Indicates a custom range is being specified for the values. Base 0.
            </summary>
        </member>
        <member name="M:ImageResizer.Configuration.Issues.IssueGatherer.#ctor(ImageResizer.Configuration.Config)">
            <summary>
            Creates a 'gatherer' that pulls issues from IIssueProviders throughout the Config structure. Even plugins are queried.
            </summary>
            <param name="c"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "T:ImageResizer.Plugins.Basic.ClientCache" -->
        <member name="T:ImageResizer.InterceptModule">
            <summary>
            Monitors incoming image requests to determine if resizing (or other processing) is being requested.
            </summary>
        </member>
        <member name="M:ImageResizer.InterceptModule.System#Web#IHttpModule#Init(System.Web.HttpApplication)">
            <summary>
            Called when the app is initialized
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ImageResizer.InterceptModule.CheckRequest_PostAuthorizeRequest(System.Object,System.EventArgs)">
            <summary>
            This is where we filter requests and intercept those that want resizing performed.
            We first strip FakeExtension, then verify the remaining file extension is supported for decoding.
            We fire URL rewriting events. If the result includes any supported querystring params afterwards, we process the request. Otherwise we let it fall back to IIS/ASP.NET.
            If the file doesn't exist, we also ignore the request. They're going to cause a 404 anyway.
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ImageResizer.InterceptModule.fixPath(System.String)">
            <summary>
            Turns relative paths into domain-relative paths.
            Turns app-relative paths into domain relative paths.
            </summary>
            <param name="virtualPath"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.InterceptModule.HandleRequest(System.Web.HttpContext,System.String,System.Collections.Specialized.NameValueCollection,System.Object)">
            <summary>
            Generates the resized image to disk (if needed), then rewrites the request to that location.
            Perform 404 checking before calling this method. Assumes file exists.
            Called during PostAuthorizeRequest
            </summary>
            <param name="context"></param>
            <param name="current"></param>
        </member>
        <member name="M:ImageResizer.InterceptModule.context_PreSendRequestHeaders(System.Object,System.EventArgs)">
            <summary>
            We don't actually send the data - but we still want to control the headers on the data.
            PreSendRequestHeaders allows us to change the content-type and cache headers at excatly the last
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:ImageResizer.InterceptModule.conf">
            <summary>
            Current configuration. Same as Config.Current.Pipeline
            </summary>
        </member>
        <member name="T:ImageResizer.Resizing.RequestedAction">
            <summary>
            What to do about remaining handlers/methods for the specified section
            </summary>
        </member>
        <member name="F:ImageResizer.Resizing.RequestedAction.None">
            <summary>
            Does nothing
            </summary>
        </member>
        <member name="F:ImageResizer.Resizing.RequestedAction.Cancel">
            <summary>
            Requests that ImageBuilder cancels the default logic of the method, and stop executing plugin calls for the method immediately.
            </summary>
        </member>
        <member name="T:ImageResizer.Plugins.Basic.SizeLimiting">
            <summary>
            Implements app-wide size Limits on image size
            </summary>
        </member>
        <member name="P:ImageResizer.Plugins.Basic.SizeLimiting.Limits">
            <summary>
            The image and total size limits
            </summary>
        </member>
        <member name="T:ImageResizer.Collections.SafeList`1">
            <summary>
            SafeList is mutable, but it uses immutable data structures to minimize the need for locking.
            The provided manipulation 
            Exposes a immutable list. Changes are made by copying the lists.
            SafeList is 
            Never perform logic on SafeList directly, always use GetList() or GetCollection() first, followed by SetList().
            If you need involved list-fu, use ModifyList and specify a callback. It will execute inside a lock, preventing changes on other threads from overwriting each other.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ImageResizer.Collections.SafeList`1.GetCollection">
            <summary>
            Returns an immutable snapshot of the collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Collections.SafeList`1.GetList">
            <summary>
            Returns a mutable snapshot of the list
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Collections.SafeList`1.SetList(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Replaces the current collection with a new one. (copied to ensure safety)
            Use ModifyList when modifying the list. Use this only when the previous or current state of the list is irrelevant.
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:ImageResizer.Collections.SafeList`1.Add(`0)">
            <summary>
            Adds the specified item to the end of the list
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:ImageResizer.Collections.SafeList`1.Remove(`0)">
            <summary>
            Removes the item from the list
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:ImageResizer.Collections.SafeList`1.AddFirst(`0)">
            <summary>
            Adds the specified item to the beginning of the list
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:ImageResizer.Collections.SafeList`1.ModifyList(ImageResizer.Collections.SafeList{`0}.ListEditor)">
            <summary>
            Allows a caller to perform logic on the list inside a lock, and return a modified list.
            Callbacks should be fast, and should reference the IList they are fed, not this SafeList instance.
            Calling methods on the SafeList instance will cause a deadlock.
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:ImageResizer.Collections.SafeList`1.Contains(`0)">
            <summary>
            Returns true if the collection contains the specified item at the moment. 
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="P:ImageResizer.Collections.SafeList`1.First">
            <summary>
            Returns the first item in the list. May return null if the list is empty.
            </summary>
        </member>
        <member name="P:ImageResizer.Collections.SafeList`1.Last">
            <summary>
            Returns the first item in the list. May return null if the list is empty.
            </summary>
        </member>
        <member name="T:ImageResizer.Plugins.Basic.DropShadow">
            <summary>
            Adds drop shadow capabilities (shadowColor, shadowOffset, and shadowWidth commands)
            </summary>
        </member>
        <member name="P:ImageResizer.Caching.ResponseHeaders.ContentType">
            <summary>
            The mime-type of the encoded image. Defaults to null
            </summary>
        </member>
        <member name="M:ImageResizer.Configuration.Config.UpgradeImageBuilder(ImageResizer.ImageBuilder)">
            <summary>
            Allows subclasses to be used instead of ImageBuilder. Replacements must override the Create method and call their own constructor instead.
            </summary>
            <param name="replacement"></param>
        </member>
        <member name="M:ImageResizer.Configuration.Config.BuildImage(System.Object,System.Object,System.String)">
            <summary>
            Shortuct to CurrentImageBuilder.Build (Useful for COM clients)
            </summary>
            <param name="source"></param>
            <param name="dest"></param>
            <param name="settings"></param>
        </member>
        <member name="M:ImageResizer.Configuration.Config.getNode(System.String)">
            <summary>
            Returns a deep copy of the specified node
            </summary>
            <param name="selector"></param>
        </member>
        <member name="M:ImageResizer.Configuration.Config.getConfigXml">
            <summary>
            Returns a deep copy if the current state of the configuration tree (starting with the 'resizer' element as the root)
            </summary>
        </member>
        <member name="M:ImageResizer.Configuration.Config.setConfigXml(ImageResizer.Configuration.Xml.Node)">
            <summary>
            Replaces the configuration tree with the specified alternative
            </summary>
            <param name="n"></param>
        </member>
        <member name="M:ImageResizer.Configuration.Config.setConfigXmlText(System.String)">
            <summary>
            Replaces the configuration tree with the specified alternative
            </summary>
            <param name="xml"></param>
        </member>
        <member name="M:ImageResizer.Configuration.Config.WriteDiagnosticsTo(System.String)">
            <summary>
            Writes a diagnostic page to the specified physical path
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:ImageResizer.Configuration.Config.GetDiagnosticsPage">
            <summary>
            Returns a string of the diagnostics page
            </summary>
            <returns></returns>
        </member>
        <member name="P:ImageResizer.Configuration.Config.Current">
            <summary>
            Gets the current (app-wide) config instance. 
            </summary>
            <returns></returns>
        </member>
        <member name="P:ImageResizer.Configuration.Config.Plugins">
            <summary>
            Access and modify plugins
            </summary>
        </member>
        <member name="P:ImageResizer.Configuration.Config.Pipeline">
            <summary>
            Access and modify settings related to the HttpModule pipline. Register URL rewriting hooks, etc.
            </summary>
        </member>
        <member name="P:ImageResizer.Configuration.Config.CurrentImageBuilder">
            <summary>
            Returns a shared instance of ImageManager, (or a subclass if it has been upgraded).
            Instances change whenever ImageBuilderExtensions change.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ImageResizer.Configuration.Config.cs">
            <summary>
            The ResizeConfigrationSection is not thread safe, and should not be modified
            Dynamically loads the ResizerSection from web.config when accessed for the first time. 
            If the resizer node doesn't exist, an empty configuration object is created with just the root resizer node.
            </summary>
        </member>
        <member name="P:ImageResizer.Configuration.Config.AllIssues">
            <summary>
            Returns a list of all issues reported by the resizing core, as well as by all the plugins
            </summary>
        </member>
        <member name="M:ImageResizer.Util.PolygonMath.RoundPoints(System.Drawing.PointF[])">
            <summary>
            Rounds the elements of the specified array [not used]
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Util.PolygonMath.RoundPoints(System.Drawing.PointF[0:,0:])">
            <summary>
            Rounds the elements of the specified array [not used]
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Util.PolygonMath.ForEach(System.Array,ImageResizer.Util.PolygonMath.ForEachFunction)">
            <summary>
            Modifies the specified array by applying the specified function to each element.
            </summary>
            <param name="a"></param>
            <param name="func">object delegate(object o){}</param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Util.PolygonMath.RotatePoly(System.Drawing.PointF[],System.Double)">
            <summary>
            Rotates the specified polygon (or set of points) around the origin. 
            </summary>
            <param name="rect"></param>
            <param name="degrees"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Util.PolygonMath.RotatePoly(System.Drawing.PointF[],System.Double,System.Drawing.PointF)">
            <summary>
            Rotates the specified polygon (or set of points) around the origin. 
            </summary>
            <param name="rect"></param>
            <param name="degrees"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Util.PolygonMath.ToPoly(System.Drawing.RectangleF)">
            <summary>
            Returns a clockwise array of points on the rectangle.
            Point 0 is top-left.
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Util.PolygonMath.NormalizePoly(System.Drawing.PointF[])">
            <summary>
            Moves the polygon so that the upper-left corner of its bounding box is located at 0,0.
            </summary>
            <param name="poly"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Util.PolygonMath.RotateVector(System.Drawing.PointF,System.Double)">
            <summary>
            Rotates the specified point around the origin.
            </summary>
            <param name="v"></param>
            <param name="radians"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Util.PolygonMath.RotateVector(System.Drawing.PointF,System.Double,System.Drawing.PointF)">
            <summary>
            Rotates the specified point around the specified origin.
            </summary>
            <param name="v"></param>
            <param name="radians"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Util.PolygonMath.ChangeMagnitude(System.Drawing.PointF,System.Single)">
            <summary>
            Returns a modified version of the specified vector with the desired length.
            </summary>
            <param name="v"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Util.PolygonMath.GetBoundingBox(System.Drawing.PointF[])">
            <summary>
            Returns a bounding box for the specified set of points.
            </summary>
            <param name="points"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Util.PolygonMath.MovePoly(System.Drawing.PointF[],System.Drawing.PointF)">
            <summary>
            Returns a modified version of the array, with each element being offset by the specified amount.
            </summary>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Util.PolygonMath.ArraysEqual(System.Drawing.PointF[],System.Drawing.PointF[])">
            <summary>
            Returns true if the member elements of the specified arrays match, and the arrays 
            are of the same length.
            </summary>
            <param name="a1"></param>
            <param name="a2"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Util.PolygonMath.getParallelogram(System.Drawing.PointF[])">
            <summary>
            Moves element 4 to spot 3 and truncates to 3 elements.
            For compatiblity with Graphics.DrawImage
            </summary>
            <param name="quad"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Util.PolygonMath.GetSubArray(System.Drawing.PointF[0:,0:],System.Int32)">
            <summary>
            Grabs a single-dimension array from a 2 dimensional array, using the specified primary index.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Util.PolygonMath.GenerateRadialBrush(System.Drawing.Color,System.Drawing.Color,System.Drawing.PointF,System.Single)">
            <summary>
            Approximates a radial brush using a high-rez PathGradientBrush.
            </summary>
            <param name="inner"></param>
            <param name="outer"></param>
            <param name="pt"></param>
            <param name="width"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Util.PolygonMath.ScaleInside(System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>
            Scales 'inner' to fit inside 'bounding' while maintaining aspect ratio. Upscales and downscales.
            </summary>
            <param name="bounding"></param>
            <param name="fitInside"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Util.PolygonMath.DownScaleInside(System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>
            Scales 'inner' to fit inside 'bounding' while maintaining aspect ratio. Only downscales.
            </summary>
            <param name="bounding"></param>
            <param name="fitInside"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Util.PolygonMath.FitsInside(System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>
            Returns true if 'inner' fits inside or equals 'outer'
            </summary>
            <param name="inner"></param>
            <param name="outer"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Util.PolygonMath.GetCorners(System.Drawing.PointF[],System.Single)">
             <summary>
             Returns an array of parallelograms. These parallelgrams are the 'corners' outside each vertex in 'poly'.
             The adjacent edges are perpendicular to 'poly'. Point 1 of each parallelogram will match the respective point in 'poly'
             Points are clockwise.
            
             TODO - some rounding issues going on, not exact numbers here
             </summary>
             <param name="inner"></param>
             <param name="outer"></param>
             <returns></returns>
        </member>
        <member name="M:ImageResizer.Util.PolygonMath.GetCorners(System.Drawing.PointF[],System.Single[])">
            <summary>
            Returns an array of parallelograms. These parallelgrams are the 'corners' outside each vertex in 'poly'.
            The adjacent edges are perpendicular to 'poly'. Point 1 of each parallelogram will match the respective point in 'poly'
            Points are clockwise.
            
            Each float in widths[] corresponds to the point in poly[]. This is the distance to go perpendicularly from 
            the line beween poly[i] and poly[i +1].
            
            </summary>
            <param name="poly"></param>
            <param name="widths"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Util.PolygonMath.GetSides(System.Drawing.PointF[],System.Single)">
            <summary>
            Returns an array of parallelograms. These parallelgrams are the 'sides' bounding the polygon.
            Points are clockwise. Point 1 is the top-left outer point, point 2 the top-right, point 3 the bottom-right, and point 4 the bottom-left.
            </summary>
            <param name="poly"></param>
            <param name="width"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Util.PolygonMath.InflatePoly(System.Drawing.PointF[],System.Single)">
            <summary>
            Expands all sides on the specified polygon by the specified offset. Assumes the polygon is concave.
            Returns a new polygon
            </summary>
            <param name="quad"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Util.PolygonMath.InflatePoly(System.Drawing.PointF[],System.Single[])">
            <summary>
            Expands all sides on the specified polygon by the specified offsets. Assumes the polygon is concave.
            Returns a new polygon.
            
            </summary>
            <param name="quad"></param>
            <param name="offsets">An array the same size as poly[], with the distances to expand the edges. Edges are between i and i+1</param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Util.PolygonMath.CenterInside(System.Drawing.PointF[],System.Drawing.PointF[])">
            <summary>
            Moves 'inner' so that the center of its bounding box equals the center of the bounding box of 'outer'
            </summary>
            <param name="inner"></param>
            <param name="outer"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Util.PolygonMath.ToRectangle(System.Drawing.RectangleF)">
            <summary>
            Rounds a floating-point rectangle to an integer rectangle using System.Round
            </summary>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="T:ImageResizer.ImageBuilder">
            <summary>
            Provides methods for generating resized images, and for reading and writing them to disk.
            Use ImageBuilder.Current to get the current instance (as configured in the application configuration), or use ImageBuilder.Current.Create() to control which extensions are used.
            </summary>
        </member>
        <member name="T:ImageResizer.Plugins.IFileExtensionPlugin">
            <summary>
            For plugins that add support for new source file image extensions.
            </summary>
        </member>
        <member name="M:ImageResizer.Plugins.IFileExtensionPlugin.GetSupportedFileExtensions">
            <summary>
            If the plugin adds support for new file extensions (such as "psd"), they should be returned by this method.
            </summary>
            <returns></returns>
        </member>
        <member name="F:ImageResizer.ImageBuilder._encoderProvider">
            <summary>
            Handles the encoder selection and provision proccess.
            </summary>
        </member>
        <member name="M:ImageResizer.ImageBuilder.#ctor(ImageResizer.Encoding.IEncoderProvider)">
            <summary>
            Creates a new ImageBuilder instance with no extensions.
            </summary>
        </member>
        <member name="M:ImageResizer.ImageBuilder.#ctor(System.Collections.Generic.IEnumerable{ImageResizer.Resizing.BuilderExtension},ImageResizer.Encoding.IEncoderProvider)">
            <summary>
            Create a new instance of ImageBuilder using the specified extensions and encoder provider. Extension methods will be fired in the order they exist in the collection.
            </summary>
            <param name="extensions"></param>
            <param name="encoderProvider"></param>
        </member>
        <member name="M:ImageResizer.ImageBuilder.Create(System.Collections.Generic.IEnumerable{ImageResizer.Resizing.BuilderExtension},ImageResizer.Encoding.IEncoderProvider)">
            <summary>
            Creates another instance of the class using the specified extensions. Subclasses should override this and point to their own constructor.
            </summary>
            <param name="extensions"></param>
            <param name="writer"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.ImageBuilder.Copy">
            <summary>
            Copies the instance along with extensions. Subclasses must override this.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.ImageBuilder.LoadImage(System.Object,ImageResizer.ResizeSettings)">
            <summary>
            Loads a Bitmap from the specified source. If a filename is available, it will be attached to bitmap.Tag in a BitmapTag instance. The Bitmap.Tag.Path value may be a virtual, relative, UNC, windows, or unix path. 
            Does not dispose 'source' if it is a Stream or Image instance - that's the responsibility of the calling code.
            </summary>
            <param name="source">May  be an instance of string, VirtualFile, IVirtualFile IVirtualBitmapFile, HttpPostedFile, Bitmap, Image, or Stream.  If passed an Image instance, the image will be cloned, which will cause metadata, indexed state, and any additional frames to be lost. Accepts physical paths and application relative paths. (C:\... and ~/path) </param>
            <param name="settings">Will ignore ICC profile if ?ignoreicc=true.</param>
            <returns>A Bitmap. The .Tag property will include a BitmapTag instance. If .Tag.Source is not null, remember to dispose it when you dispose the Bitmap.</returns>
        </member>
        <member name="M:ImageResizer.ImageBuilder.DecodeStream(System.IO.Stream,ImageResizer.ResizeSettings,System.String)">
            <summary>
            Decodes the stream into a bitmap instance. As of 3.0.7, now ensures the stream can safely be closed after the method returns.
            May copy the stream. The copied stream will be in b.Tag.Source. Does not close or dispose any streams.
            </summary>
            <param name="s"></param>
            <param name="settings"></param>
            <param name="optionalPath"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.ImageBuilder.Build(System.Object,ImageResizer.ResizeSettings)">
            <summary>
            Resizes and processes the specified source image and returns a bitmap of the result.
            Note! 
            This method assumes that transparency will be supported in the final output format, and therefore does not apply a matte color. Use &amp;bgcolor to specify a background color
            if you use this method with a non-transparent format such as Jpeg.
            If passed a source Stream, Bitmap, or Image instance, it will be disposed after use. Use disposeSource=False to disable that behavior. 
            </summary>
            <param name="source">May be an instance of string (a physical path), VirtualFile, IVirtualBitmapFile, HttpPostedFile, Bitmap, Image, or Stream.</param>
            <param name="settings">Resizing and processing command to apply to the.</param>
        </member>
        <member name="M:ImageResizer.ImageBuilder.Build(System.Object,ImageResizer.ResizeSettings,System.Boolean)">
            <summary>
            Resizes and processes the specified source image and returns a bitmap of the result.
            Note! 
            This method assumes that transparency will be supported in the final output format, and therefore does not apply a matte color. Use &amp;bgcolor to specify a background color
            if you use this method with a non-transparent format such as Jpeg.
            
            If passed a source Stream, Bitmap, or Image instance, it will not be disposed unless disposeSource=true.
            </summary>
            <param name="source">May be an instance of string (a physical path), VirtualFile, IVirtualBitmapFile, HttpPostedFile, Bitmap, Image, or Stream.</param>
            <param name="settings">Resizing and processing command to apply to the.</param>
            <param name="disposeSource">If false, 'source' will not be disposed. </param>
        </member>
        <member name="M:ImageResizer.ImageBuilder.Build(System.Object,System.Object,ImageResizer.ResizeSettings)">
            <summary>
            Resizes and processes the specified source image and stores the encoded result in the specified destination.
            If passed a source Stream, Bitmap, or Image instance, it will be disposed after use. Use disposeSource=False to disable that behavior. 
            </summary>
            <param name="source">May be an instance of string (a physical path or app-relative virtual path), VirtualFile, IVirtualBitmapFile, HttpPostedFile, Bitmap, Image, or Stream. App-relative virtual paths will use the VirtualPathProvider system</param>
            <param name="dest">May be a physical path (string), or a Stream instance. Does not have to be seekable.</param>
            <param name="settings">Resizing and processing command to apply to the image.</param>
        </member>
        <member name="M:ImageResizer.ImageBuilder.Build(System.Object,System.Object,ImageResizer.ResizeSettings,System.Boolean)">
            <summary>
            Resizes and processes the specified source image and stores the encoded result in the specified destination. 
            If passed a source Stream, Bitmap, or Image instance, it will not be disposed unless disposeSource=true.
            </summary>
            <param name="source">May be an instance of string (a physical path or app-relative virtual path), VirtualFile, IVirtualBitmapFile, HttpPostedFile, Bitmap, Image, or Stream. App-relative virtual paths will use the VirtualPathProvider system</param>
            <param name="dest">May be a physical path (string), or a Stream instance. Does not have to be seekable.</param>
            <param name="settings">Resizing and processing command to apply to the image.</param>
            <param name="disposeSource">True to dispose 'source' after use. False to leave intact.</param>
        </member>
        <member name="M:ImageResizer.ImageBuilder.Build(System.Object,System.Object,ImageResizer.ResizeSettings,System.Boolean,System.Boolean)">
            <summary>
            Resizes and processes the specified source image and stores the encoded result in the specified destination. 
            If passed a source Stream, Bitmap, or Image instance, it will not be disposed unless disposeSource=true.
            If passed a path destination, the physical path of the written file will be returned.
            </summary>
            <param name="source">May be an instance of string (a physical path or app-relative virtual path), VirtualFile, IVirtualBitmapFile, HttpPostedFile, Bitmap, Image, or Stream. App-relative virtual paths will use the VirtualPathProvider system</param>
            <param name="dest">May be a physical path (string), or a Stream instance. Does not have to be seekable.</param>
            <param name="settings">Resizing and processing command to apply to the image.</param>
            <param name="disposeSource">True to dispose 'source' after use. False to leave intact.</param>
            <param name="addFileExtension">If true, will add the correct file extension to 'dest' if it is a string. </param>
        </member>
        <member name="M:ImageResizer.ImageBuilder.buildToStream(System.Drawing.Bitmap,System.IO.Stream,ImageResizer.ResizeSettings)">
            <summary>
            Override this when you need to override the behavior of image encoding and/or Bitmap processing
            Not for external use. Does NOT dispose of 'source' or 'source's underlying stream.
            </summary>
            <param name="source"></param>
            <param name="dest"></param>
            <param name="settings"></param>
        </member>
        <member name="M:ImageResizer.ImageBuilder.buildToBitmap(System.Drawing.Bitmap,ImageResizer.ResizeSettings,System.Boolean)">
            <summary>
            Override this when you need to override the behavior of Bitmap processing. 
            Not for external use. Does NOT dispose of 'source' or 'source's underlying stream.
            </summary>
            <param name="source"></param>
            <param name="settings"></param>
            <param name="transparencySupported">True if the output method will support transparency. If false, the image should be provided a matte color</param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.ImageBuilder.Process(ImageResizer.Resizing.ImageState)">
            <summary>
            Processes an ImageState instance. Used by Build, GetFinalSize, and TranslatePoint. 
            Can be overriden by a plugin with the OnProcess method
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:ImageResizer.ImageBuilder.Layout(ImageResizer.Resizing.ImageState)">
            <summary>
            Process.3: Handles the layout phase of Processing
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:ImageResizer.ImageBuilder.Render(ImageResizer.Resizing.ImageState)">
            <summary>
            Handles the rendering phase of processing
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:ImageResizer.ImageBuilder.PrepareSourceBitmap(ImageResizer.Resizing.ImageState)">
            <summary>
            Process.1 Switches the bitmap to the correct frame or page, and applies source flipping commands
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.ImageBuilder.PrepareDestinationBitmap(ImageResizer.Resizing.ImageState)">
            <summary>
            Creates a bitmap of s.destSize dimensions, intializes a graphics object for it, and configures all the default settings.
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:ImageResizer.ImageBuilder.RenderBackground(ImageResizer.Resizing.ImageState)">
            <summary>
            Sets the background color if needed or requested
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:ImageResizer.ImageBuilder.TranslatePoints(System.Drawing.PointF[],System.Drawing.Size,ImageResizer.ResizeSettings)">
            <summary>
            Doesn't support flipping. Translate a point on the original bitmap to a point on the new bitmap. If the original point no longer exists, returns Empty
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.ImageBuilder.GetFinalSize(System.Drawing.Size,ImageResizer.ResizeSettings)">
            <summary>
            Gets the final size of an image
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.ImageBuilder.LayoutImage(ImageResizer.Resizing.ImageState)">
            <summary>
            Populates copyRect, as well as Rings image and imageArea. Translates and scales any existing rings as if they existed on the original bitmap.
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:ImageResizer.ImageBuilder.GetSupportedFileExtensions">
            <summary>
            Returns a list of the file extensions ImageBuilder can load by default. Plugins can implement IFileExtensionPlugin to add new ones.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.ImageBuilder.GetSupportedQuerystringKeys">
            <summary>
            Returns a list of the querystring commands ImageBuilder can parse by default. Plugins can implement IQuerystringPlugin to add new ones.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ImageResizer.ImageBuilder.EncoderProvider">
            <summary>
            Handles the encoder selection and provision proccess.
            </summary>
        </member>
        <member name="P:ImageResizer.ImageBuilder.Current">
            <summary>
            Returns a shared instance of ImageBuilder or a subclass, equivalent to  Config.Current.CurrentImageBuilder
            </summary>
            <returns></returns>
        </member>
        <member name="T:ImageResizer.ImageBuilder.BitmapHolder">
            <summary>
            Allows Bitmap Build(object) to wrap void Build(object,object) easily.
            </summary>
        </member>
        <member name="T:ImageResizer.Plugins.Basic.SizeLimits">
            <summary>
            Enforces two kinds of maximum size constraints: a Total size limit, and an Image size limit. 
            Image limits do not include padding, border, or effect widths, and automatically shrink the 'width/height/maxwidth/maxheight' values to fit within the limits.
            Total limits are absolute and apply to the actual result dimensions, causing an exception if they are exceeded. 
            Limits are checked during the layout phase,  prior to resource-intensive bitmap operations.
            </summary>
        </member>
        <member name="P:ImageResizer.Plugins.Basic.SizeLimits.TotalSize">
            <summary>
            The maximum final size an image generated by ImageBuilder can be.  
            Defaults to 3200x3200
            </summary>
        </member>
        <member name="P:ImageResizer.Plugins.Basic.SizeLimits.TotalBehavior">
            <summary>
            What action to take when the total size of the final image would exceed the TotalSize value.
            Defaults to ThowException
            </summary>
        </member>
        <member name="P:ImageResizer.Plugins.Basic.SizeLimits.HasImageSize">
            <summary>
            Returns true if ImageSize is specified.
            </summary>
        </member>
        <member name="P:ImageResizer.Plugins.Basic.SizeLimits.ImageSize">
            <summary>
            The maximum size an un-rotated image can be drawn when creating a resized image. 
            Rotation will increase the total size, as will any borders, paddings, margins, or
            effects. Not effective at preventing attacks, use totalSize.
            If larger values are specified in a querystring, they will automatically
            be scaled to fit within these dimensions.
            Defaults to 0x0, which means no limits
            </summary>
        </member>
        <member name="F:ImageResizer.Configuration.Issues.IssueSeverity.Critical">
            <summary>
            Security and stability issues.
            </summary>
        </member>
        <member name="F:ImageResizer.Configuration.Issues.IssueSeverity.Error">
            <summary>
            Behavioral issues, such as having no registered image encoders
            </summary>
        </member>
        <member name="F:ImageResizer.Configuration.Issues.IssueSeverity.ConfigurationError">
            <summary>
            Errors in the module configuration
            </summary>
        </member>
        <member name="F:ImageResizer.Configuration.Issues.IssueSeverity.Warning">
            <summary>
            Non-optimal settings
            </summary>
        </member>
        <member name="M:ImageResizer.Util.Utils.parseList(System.String,System.Double)">
            <summary>
            Parses lists in the form "3,4,5,2,5" and "(3,4,40,50)". If a number cannot be parsed (i.e, number 2 in "5,,2,3") defaultValue is used.
            </summary>
            <param name="text"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Util.Utils.copyStream(System.IO.Stream,System.IO.Stream)">
            <summary>
            Copies all remaining data from 'source' to 'dest'
            </summary>
            <param name="source"></param>
            <param name="dest"></param>
        </member>
        <member name="M:ImageResizer.Util.Utils.parseFlip(System.String)">
            <summary>
            Returns RotateNoneFlipNone if not a recognize value.
            </summary>
            <param name="sFlip"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Util.Utils.writeFlip(System.Drawing.RotateFlipType)">
            <summary>
            Throws an exception if the specified value is unsupported. Rotation values are not supported, and should be specified with the Rotate command.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Util.Utils.parsePadding(System.String)">
            <summary>
            Parses padding, allowing syntax (all) and (left, top, right, bottom). Parens are optional.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Util.Utils.DrawOuterGradient(System.Drawing.Graphics,System.Drawing.PointF[],System.Drawing.Color,System.Drawing.Color,System.Single)">
            <summary>
            Draws a gradient around the specified polygon. Fades from 'inner' to 'outer' over a distance of 'width' pixels. 
            </summary>
            <param name="g"></param>
            <param name="poly"></param>
            <param name="inner"></param>
            <param name="outer"></param>
            <param name="width"></param>
        </member>
        <member name="M:ImageResizer.Util.PathUtils.SetExtension(System.String,System.String)">
            <summary>
            Sets the file extension of the specified path to the specified value, returning the result.
            If an extension has multiple parts, it will replace all of them.
            </summary>
            <param name="path"></param>
            <param name="newExtension"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Util.PathUtils.RemoveFullExtension(System.String)">
            <summary>
            Removes the extension from the filename.
            </summary>
            <param name="path"></param>
            <param name="newExtension"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Util.PathUtils.RemoveExtension(System.String)">
            <summary>
            Removes the extension from the filename.
            </summary>
            <param name="path"></param>
            <param name="newExtension"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Util.PathUtils.AddExtension(System.String,System.String)">
            <summary>
            Adds the specified extension to path, returning the result. Multiple calls will result in "path.ext.ext.ext.ext".
            maintains the querystring as-is.
            </summary>
            <param name="path"></param>
            <param name="newExtension"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Util.PathUtils.GetFullExtension(System.String)">
            <summary>
            Will return the full extension, like ".jpg.ashx", not just the last bit. 
            Ignores the querystring part. Excludes extensions containing spaces or slashes.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Util.PathUtils.ResolveAppRelative(System.String)">
            <summary>
            
            </summary>
            <param name="virtualPath"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Util.PathUtils.AddQueryString(System.String,System.String)">
            <summary>
            Joins the path and querystring. If the path already contains a querystring, they are 'append joined' with the correct character.
            </summary>
            <param name="virtualPath"></param>
            <param name="querystring"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Util.PathUtils.MergeOverwriteQueryString(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Overwrites exisisting querystring values in 'path' with the values in 'newQuerystring'
            </summary>
            <param name="path"></param>
            <param name="newQuerystring"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Util.PathUtils.MergeQueryString(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Adds the querystring values in 'newQuerystring' to the querystring in Path, but does not overwrite values.
            </summary>
            <param name="path"></param>
            <param name="newQuerystring"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Util.PathUtils.BuildQueryString(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Returns a string querystring in the form "?key=value&amp;key=value".
            Keys and values are UrlEncoded as they should be.
            </summary>
            <param name="QueryString"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Util.PathUtils.BuildQueryString(System.Collections.Specialized.NameValueCollection,System.Boolean)">
            <summary>
            Returns a string querystring in the form "?key=value&amp;key=value".
            Keys and values are UrlEncoded if urlEncode=true.
            </summary>
            <param name="QueryString"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Util.PathUtils.RemoveQueryString(System.String)">
            <summary>
            Removes the query string from the specifed path. If the path is only a querystring, an empty string is returned.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Util.PathUtils.ParseQueryStringFriendly(System.String)">
            <summary>
            Like ParseQueryString, but permits the leading '?' to be omitted.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ImageResizer.Util.PathUtils.ParseQueryString(System.String)" -->
        <member name="P:ImageResizer.Util.PathUtils.AppVirtualPath">
            <summary>
            Returns HostingEnvironment.ApplicationVirtualPath or "/", if asp.net is not running
            </summary>
        </member>
        <member name="P:ImageResizer.Util.PathUtils.AppPhysicalPath">
            <summary>
            If not running in ASP.NET, returns the folder containing the DLL.
            </summary>
        </member>
        <member name="T:ImageResizer.ResizerSection">
            <summary>
            Handles reading the &lt;resizer&gt; section from Web.Config
            </summary>
        </member>
        <member name="M:ImageResizer.ResizerSection.getCopyOfNode(System.String)">
            <summary>
            Returns the specified subtree, deep copied so it can be used without locking.
            </summary>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.ResizerSection.OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)">
            <summary>
            Called for each child element not specified declaratively
            </summary>
            <param name="elementName"></param>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Util.UrlHasher.hash(System.String,System.Int32,System.String)">
            <summary>
            Builds a key for the cached version, using the hashcode of the normalized URL.
            if subfolders > 0, dirSeparator will be used to separate the subfolder and the key. 
            No extension is appended.
            I.e, a13514\124211ab132592 or 12412ababc12141
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.Util.UrlHasher.getSubfolder(System.Byte[],System.Int32)">
            <summary>
            Returns a string for the subfolder name. The bits used are from the end of the hash - this should make
            the hashes in each directory more unique, and speed up performance (8.3 filename calculations are slow when lots of files share the same first 6 chars.
            Returns null if not configured. Rounds subfolders up to the nearest power of two.
            </summary>
            <param name="hash"></param>
            <returns></returns>
        </member>
        <member name="T:ImageResizer.ResizeSettings">
            <summary>
            Represents the settings which will be used to process the image. 
            Extends NameValueCollection to provide friendly property names for commonly used settings.
            </summary>
        </member>
        <member name="M:ImageResizer.ResizeSettings.#ctor">
            <summary>
            Creates an empty settings collection. 
            </summary>
        </member>
        <member name="M:ImageResizer.ResizeSettings.#ctor(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Copies the specified collection into a new ResizeSettings instance.
            </summary>
            <param name="col"></param>
        </member>
        <member name="M:ImageResizer.ResizeSettings.#ctor(System.String)">
            <summary>
            Parses the specified querystring into name/value pairs. leading ? not required.
            </summary>
            <param name="queryString"></param>
        </member>
        <member name="M:ImageResizer.ResizeSettings.WasOneSpecified(System.String[])">
            <summary>
            Returns true if any of the specified keys are present in this NameValueCollection
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.ResizeSettings.ToString">
            <summary>
            Returns a string containing all the settings in the class, in querystring form. Use ToStringEncoded() to get a URL-safe querystring. 
            This method does not encode commas, spaces, etc.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ImageResizer.ResizeSettings.ToStringEncoded">
            <summary>
            Returns a querystring with all the settings in this class. Querystring keys and values are URL encoded properly.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ImageResizer.ResizeSettings.Width">
            <summary>
            ["width"]: Sets the desired width of the image. (minus padding, borders, margins, effects, and rotation). 
            The only instance the resulting image will be smaller is if the original source image is smaller. 
            Set Scale=Both to upscale these images and ensure the output always matches 'width' and 'height'. 
            If both width and height are specified, the image will be 'letterboxed' to match the desired aspect ratio. 
            Use maxwidth/maxheight, crop=auto, or stretch=fill to avoid this behavior.
            </summary>
        </member>
        <member name="P:ImageResizer.ResizeSettings.Height">
            <summary>
            ["height"]: Sets the desired height of the image.  (minus padding, borders, margins, effects, and rotation)
            The only instance the resulting image will be smaller is if the original source image is smaller. 
            Set Scale=Both to upscale these images and ensure the output always matches 'width' and 'height'. 
            If both width and height are specified, the image will be 'letterboxed' to match the desired aspect ratio. 
            Use maxwidth/maxheight, crop=auto, or stretch=fill to avoid this behavior.
            </summary>
        </member>
        <member name="P:ImageResizer.ResizeSettings.MaxWidth">
            <summary>
            ["maxwidth"]: Sets the maximum desired width of the image.  (minus padding, borders, margins, effects, and rotation). 
            The image may be smaller than this value to maintain aspect ratio when both maxwidth and maxheight are specified.
            </summary>
        </member>
        <member name="P:ImageResizer.ResizeSettings.MaxHeight">
            <summary>
            ["maxheight"]: Sets the maximum desired height of the image.  (minus padding, borders, margins, effects, and rotation). 
            The image may be smaller than this value to maintain aspect ratio when both maxwidth and maxheight are specified.
            </summary>
        </member>
        <member name="P:ImageResizer.ResizeSettings.Rotate">
            <summary>
            ["rotate"] The degress to rotate the image clockwise. -360 to 360.
            </summary>
        </member>
        <member name="P:ImageResizer.ResizeSettings.Flip">
            <summary>
            Allows you to flip the entire resulting image vertically, horizontally, or both.
            </summary>
        </member>
        <member name="P:ImageResizer.ResizeSettings.SourceFlip">
            <summary>
            ["sourceFlip"] Allows you to flip the source image vertically, horizontally, or both.
            </summary>
        </member>
        <member name="P:ImageResizer.ResizeSettings.Scale">
            <summary>
            ["scale"] Whether to downscale, upscale, upscale the canvas, or both upscale or downscale the image as needed. Defaults to
            DownscaleOnly. 
            </summary>
        </member>
        <member name="P:ImageResizer.ResizeSettings.Stretch">
            <summary>
            Whether to preserve aspect ratio or stretch.
            </summary>
        </member>
        <member name="P:ImageResizer.ResizeSettings.Cache">
            <summary>
            ["cache"]: Server caching mode suggestion for the result
            </summary>
        </member>
        <member name="P:ImageResizer.ResizeSettings.Process">
            <summary>
            ["process"]: Server processing suggestion for the result. Allows you to 'disable' processing of the image (so you can use disk caching with non-image files). Allows you to 'force' processing of the image, for images without a querystring.
            </summary>
        </member>
        <member name="P:ImageResizer.ResizeSettings.CropMode">
            <summary>
            ["crop"]=none|auto Defaults to None - letterboxing is used if both width and height are supplied, and stretch = proportionally.
            Set CropTopLeft and CropBottomRight when you need to specify a custom crop rectangle.
            </summary>
        </member>
        <member name="P:ImageResizer.ResizeSettings.CropValues">
            <summary>
            4 values specify x1,y1,x2,y2 values for the crop rectangle.
            Negative values are relative to the bottom right - on a 100x100 picture, (10,10,90,90) is equivalent to (10,10,-10,-10). And (0,0,0,0) is equivalent to (0,0,100,100).
            </summary>
        </member>
        <member name="P:ImageResizer.ResizeSettings.CropTopLeft">
            <summary>
            ["crop"]=([x1],[y1],x2,y2). Sets x1 and y21, the top-right corner of the crop rectangle. If 0 or greater, the coordinate is relative to the top-left corner of the image.
            If less than 0, the value is relative to the bottom-right corner. This allows for easy trimming: crop=(10,10,-10,-10).
            Set ["cropxunits"] and ["cropyunits"] to the width/height of the rectangle your coordinates are relative to, if different from the original image size.
            </summary>
        </member>
        <member name="P:ImageResizer.ResizeSettings.CropBottomRight">
            <summary>
            ["crop"]=(x1,y1,[x2],[y2]). Sets x2 and y2, the bottom-right corner of the crop rectangle. If 1 or greater, the coordinate is relative to the top-left corner of the image.
            If 0 or less, the value is relative to the bottom-right corner. This allows for easy trimming: crop=(10,10,-10,-10).
            Set ["cropxunits"] and ["cropyunits"] to the width/height of the rectangle your coordinates are relative to, if different from the original image size.
            </summary>
        </member>
        <member name="P:ImageResizer.ResizeSettings.BackgroundColor">
            <summary>
            ["bgcolor"]: Named and hex values are supported. (rgb and rgba, both 3, 6, and 8 digits).
            </summary>
        </member>
        <member name="P:ImageResizer.ResizeSettings.PaddingColor">
            <summary>
            Gets/sets ["paddingColor"]. Named and hex values are supported. (rgb and rgba, both 3, 6, and 8 digits).
            </summary>
        </member>
        <member name="P:ImageResizer.ResizeSettings.Padding">
            <summary>
            ["paddingWidth"]: Gets/sets the width(s) of padding inside the image border.
            </summary>
        </member>
        <member name="P:ImageResizer.ResizeSettings.Margin">
            <summary>
            ["margin"]: Gets/sets the width(s) of the margin outside the image border and effects.
            </summary>
        </member>
        <member name="P:ImageResizer.ResizeSettings.BorderColor">
            <summary>
            Gets/sets ["borderColor"]. Named and hex values are supported. (rgb and rgba, both 3, 6, and 8 digits).
            </summary>
        </member>
        <member name="P:ImageResizer.ResizeSettings.Border">
            <summary>
            Friendly get/set accessor for the ["borderWidth"] value. Returns BoxPadding.Empty when unspecified.
            </summary>
        </member>
        <member name="P:ImageResizer.ResizeSettings.Format">
            <summary>
            Like this["format"]. 
            Gets or sets the output file format to use. "png", "jpg", and "gif" are valid values.
            Returns null if unspecified. When format is not specified, the original format of the image is used (unless it is not a web safe format  - jpeg is the fallback in that scenario).
            <remarks>Also checks the 'thumbnail' value for V2 compatibility. When set, 'thumnail' is removed and only 'format' is used.
            </remarks>
            </summary>
        </member>
        <member name="T:ImageResizer.Plugins.Basic.DiagnosticMode">
            <summary>
            Determines when the diagnostics page can be viewed.
            </summary>
        </member>
        <member name="F:ImageResizer.Plugins.Basic.DiagnosticMode.None">
            <summary>
            Diagnostics are disabled
            </summary>
        </member>
        <member name="F:ImageResizer.Plugins.Basic.DiagnosticMode.Localhost">
            <summary>
            Only local requests can access diagnostics
            </summary>
        </member>
        <member name="F:ImageResizer.Plugins.Basic.DiagnosticMode.AllHosts">
            <summary>
            All hosts can view diagnostics.
            </summary>
        </member>
        <member name="T:ImageResizer.Plugins.Basic.Diagnostic">
            <summary>
            Provides the incredibly helpful /resizer.debug page we all love.
            
            Mimics the behavior of customErrors by default. Not available if CustomErrors=true or retail=true. Available only to localhost if customErrors=RemoteOnly.
            Can be overriden by adding in the &lt;resizer&gt; section &lt;diagnostics enableFor="None|AllHosts|LocalHost" /&gt;
            
            </summary>
        </member>
        <member name="M:ImageResizer.Plugins.Basic.Diagnostic.AllowResponse(System.Web.HttpContext)">
            <summary>
            True if diagnostics can be displayed to the current user.
            If &lt;diagnostics enableFor="None" /&gt;, returns false.
            If &lt;diagnostics enableFor="Localhost" /&gt;, returns false for remote requests
            If &lt;diagnostics enableFor="AllHosts" /&gt;, returns true.
            If unspecified, uses the same behavior as ASP.NET Custom Errors.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:ImageResizer.Plugins.Basic.NoCacheHandler">
            <summary>
            Implements IHttpHandler, serves content for the NoCache plugin
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:ImageResizer.Plugins.Basic.Image404" -->
        <member name="T:ImageResizer.Resizing.ImageState">
            <summary>
            Encapsulates the state of an image being resized. 
            Can be used to simulate a resize as well as actually perform one.
            All code should ignore when Bitmaps and Graphics objects are null, and go about simulating all the mathematical functions as normal.
            
            </summary>
        </member>
        <member name="F:ImageResizer.Resizing.ImageState.settings">
            <summary>
            The commands to apply to the bitmap
            </summary>
        </member>
        <member name="F:ImageResizer.Resizing.ImageState.originalSize">
            <summary>
            The original size of the source bitmap. Use this instead of accessing the bitmap directly for this information, since the bitmap may not always be available
            </summary>
        </member>
        <member name="F:ImageResizer.Resizing.ImageState.supportsTransparency">
            <summary>
            Rendering choices can depend on whether the output format supports transparency.
            </summary>
        </member>
        <member name="F:ImageResizer.Resizing.ImageState.layout">
            <summary>
            The layout object. Used for calculated and flowing the layout of the various rings around the image (padding, border, effect, margin, etc).
            </summary>
        </member>
        <member name="F:ImageResizer.Resizing.ImageState.destSize">
            <summary>
            The size of the target bitmap image. Set after all sizing operations have completed.
            </summary>
        </member>
        <member name="F:ImageResizer.Resizing.ImageState.finalSize">
            <summary>
            The dimensions of the bitmap afer all operations have been applied to it (Calling FlipRotate can change the bitmap dimensions).
            </summary>
        </member>
        <member name="F:ImageResizer.Resizing.ImageState.copyRect">
            <summary>
            The rectangular portion of the source image to copy
            </summary>
        </member>
        <member name="F:ImageResizer.Resizing.ImageState.sourceBitmap">
            <summary>
            The source bitmap.  If null, skip drawing commands, but continue layout logic.
            </summary>
        </member>
        <member name="F:ImageResizer.Resizing.ImageState.destBitmap">
            <summary>
            The destination bitmap.  If null, skip drawing commands, but continue layout logic.
            </summary>
        </member>
        <member name="F:ImageResizer.Resizing.ImageState.destGraphics">
            <summary>
            A graphics object to write to the destination bitmap. If null, skip drawing commands, but continue layout logic.
            </summary>
        </member>
        <member name="F:ImageResizer.Resizing.ImageState.copyAttibutes">
            <summary>
            Allows color correction/modification during the image copy.
            </summary>
        </member>
        <member name="M:ImageResizer.Resizing.ImageState.Dispose">
            <summary>
            Disposes sourceBitmap, destGraphics, destBitmap, and copyAttributes if they are non-null
            </summary>
        </member>
        <member name="P:ImageResizer.Resizing.ImageState.copySize">
            <summary>
            (read-only) Same as copyRect.Size, convenience property.
            </summary>
        </member>
        <member name="P:ImageResizer.Resizing.ImageState.Data">
            <summary>
            Allows extensions to store data along with the image state
            </summary>
        </member>
    </members>
</doc>
